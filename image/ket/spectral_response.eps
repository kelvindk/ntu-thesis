%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: spectral.pdf
%%Creator: (Adobe Acrobat 11.0.13)
%%For: cwyou
%%CreationDate: 12/2/15, 1:23 PM
%%BoundingBox: -263 262 478 740
%%HiResBoundingBox: -262.7495 262.7494 477.0305 739.7800
%%CropBox: -262.7495 262.7494 477.0305 739.7800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1052 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2015-12-02T13:21:06+08:00"
   xmp:CreateDate="2015-12-02T13:21:06+08:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 10.1.1 (Windows)"
   xmpMM:DocumentID="uuid:77542908-8ccf-4b96-aa86-a1d2922da88c"
   xmpMM:InstanceID="uuid:bccf42cf-2463-4712-b72c-6502cb2d3edb">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft PowerPoint - fig-paper.pptx</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>cwyou</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -739.78 translate
pgsv
[0 1 -1 0 477.031 0 ]ct
gsave
np
gsave
0 0 mo
0 739.78 li
477.031 739.78 li
477.031 0 li
cp
clp
gsave
472.286 777.934 mo
-1.29349 777.934 li
-1.29349 -63.9261 li
472.286 -63.9261 li
cp
eclp
-1.29349 777.934 mo
472.286 777.934 li
472.286 -63.9361 li
-1.29349 -63.9361 li
cp
false sop
0 0 0 0 cmyk
f
grestore
454.346 330.153 mo
453.927 330.153 li
453.927 14.9135 li
454.346 14.9135 li
cp
453.927 330.153 mo
cp
449.727 15.7534 mo
454.107 6.99341 li
458.487 15.7534 li
false sop
.75021 .679683 .670222 .90164 cmyk
f
452.667 330.153 mo
341.247 330.153 li
341.247 329.673 li
452.667 329.673 li
cp
342.147 334.293 mo
333.327 329.913 li
342.147 325.533 li
f
319.407 165.393 mo
321.387 165.393 li
321.387 167.373 li
319.407 167.373 li
cp
323.367 165.393 mo
325.347 165.393 li
325.347 167.373 li
323.367 167.373 li
cp
327.327 165.393 mo
329.307 165.393 li
329.307 167.373 li
327.327 167.373 li
cp
331.286 165.393 mo
333.267 165.393 li
333.267 167.373 li
331.286 167.373 li
cp
335.187 165.393 mo
337.167 165.393 li
337.167 167.373 li
335.187 167.373 li
cp
339.147 165.393 mo
341.127 165.393 li
341.127 167.373 li
339.147 167.373 li
cp
343.107 165.393 mo
345.087 165.393 li
345.087 167.373 li
343.107 167.373 li
cp
347.067 165.393 mo
349.047 165.393 li
349.047 167.373 li
347.067 167.373 li
cp
351.027 165.393 mo
352.947 165.393 li
352.947 167.373 li
351.027 167.373 li
cp
354.927 165.393 mo
356.907 165.393 li
356.907 167.373 li
354.927 167.373 li
cp
358.887 165.393 mo
360.867 165.393 li
360.867 167.373 li
358.887 167.373 li
cp
362.847 165.393 mo
364.827 165.393 li
364.827 167.373 li
362.847 167.373 li
cp
366.807 165.393 mo
368.787 165.393 li
368.787 167.373 li
366.807 167.373 li
cp
370.707 165.393 mo
372.687 165.393 li
372.687 167.373 li
370.707 167.373 li
cp
374.667 165.393 mo
376.647 165.393 li
376.647 167.373 li
374.667 167.373 li
cp
378.627 165.393 mo
380.607 165.393 li
380.607 167.373 li
378.627 167.373 li
cp
382.587 165.393 mo
384.567 165.393 li
384.567 167.373 li
382.587 167.373 li
cp
386.487 165.393 mo
388.467 165.393 li
388.467 167.373 li
386.487 167.373 li
cp
390.447 165.393 mo
392.427 165.393 li
392.427 167.373 li
390.447 167.373 li
cp
394.407 165.393 mo
396.387 165.393 li
396.387 167.373 li
394.407 167.373 li
cp
398.367 165.393 mo
400.347 165.393 li
400.347 167.373 li
398.367 167.373 li
cp
402.327 165.393 mo
404.247 165.393 li
404.247 167.373 li
402.327 167.373 li
cp
406.227 165.393 mo
408.207 165.393 li
408.207 167.373 li
406.227 167.373 li
cp
410.187 165.393 mo
412.167 165.393 li
412.167 167.373 li
410.187 167.373 li
cp
414.147 165.393 mo
416.127 165.393 li
416.127 167.373 li
414.147 167.373 li
cp
418.107 165.393 mo
420.087 165.393 li
420.087 167.373 li
418.107 167.373 li
cp
422.007 165.393 mo
423.987 165.393 li
423.987 167.373 li
422.007 167.373 li
cp
425.967 165.393 mo
427.947 165.393 li
427.947 167.373 li
425.967 167.373 li
cp
429.927 165.393 mo
431.907 165.393 li
431.907 167.373 li
429.927 167.373 li
cp
433.887 165.393 mo
435.867 165.393 li
435.867 167.373 li
433.887 167.373 li
cp
437.847 165.393 mo
439.767 165.393 li
439.767 167.373 li
437.847 167.373 li
cp
441.747 165.393 mo
443.727 165.393 li
443.727 167.373 li
441.747 167.373 li
cp
445.707 165.393 mo
447.687 165.393 li
447.687 167.373 li
445.707 167.373 li
cp
449.667 165.393 mo
451.646 165.393 li
451.646 167.373 li
449.667 167.373 li
cp
453.627 165.393 mo
453.687 165.393 li
453.687 167.373 li
453.627 167.373 li
cp
.467353 0 .87747 0 cmyk
f
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FUUQMX+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (FUUQMX+TimesNewRomanPSMT)%%Title: (FUUQMX+TimesNewRomanPSMT Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /FUUQMX+TimesNewRomanPSMT def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {-568 -307 2046 1040} def/FontInfo 4 dict dup begin/FSType 8 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 4099 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 15 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |54 <001C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC49387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F8D7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5BFD7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEEB6B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E645337518CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE904907DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3AB444BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80CE13D22435E5FCC1B5A000DE> |83 <001C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40EB48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A09244048D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC666023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F75904A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B8431B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076E94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02DF1C7730E7CC0F462D79552DFA> |72 <001C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984A59E1CFFFD06EA629758085868D3F5F7204292> |70 <001C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC54400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C2999730E7919239B324086FEA852156F456647AA0692084759C352D6998971799F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |87 <001C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |85 <001C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C360275B503E4954E912CD342> |68 <001C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272EF1EF1464C3F0D45D7CBB8749AF571E09> |79 <001C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527D6441CE02F5A28D63A618F> |3 <001C60D8A8C9B8707C25> |86 <001C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |82 <001C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA436702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |81 <001C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B280026130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0027198438FE663C2EACF82CEB86F7C727594> |58 <001C60D8A8C9B5D6EF4CB383496C62617B8BD4FD4927BDE48152A6FF6216428592F5AFA3D18F24C53020F77DA565222C98E1F496EC6F2EE4EB22E43F233D8D98DB46EC3FFD79A8A395ED6571E9EE52C2D64F4FF1F26706DF3355CFC8C908EAA86ADD43E05EADD0D2F7D3DC578FF752F1D87291BBD55E577C117CD30BA3049BD39543241DD7DCD07617FA8A494E710E269F478E2E95BEC8AA7E710ACD0612E8921B3DAA59E93D8AA4276CD08DDB3A9B4D762893C74EF3108E125B72E190D045E652A0B8E8729169D251777FA84DD9EC852ADB1FB8FFEDFE199F837B9E862E992403453891> |89 <001C60D8A8C9B7A73DDA3AD4E30B5CCD7D3C12F7959C83D9C808662F1D29403E3640D88B6D61CC1EF17C120CDCE65E70C4FE9E153F8E52BB6A45EF1A33FF33B350E779BE70BFD66B1893DAD63FDF011F2039FF0D075853D9D0E3D26BA0EDAEDA247A4C2489AC431F6D923096DA608667B0FA6E60F963DA8A46029578956D98258ABD433E9E> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /FUUQMX+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/FUUQMX+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/SSJTFL+TimesNewRomanPSMT /FUUQMX+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPutSSJTFL+TimesNewRomanPSMT [0 -15.78 -15.78 0 0 0 ]msf329.607 323.614 mo(\0006\000S\000H\000F\000W\000U\000D\000O\000\003\000U\000H\000V\000S\000R\000Q\000V\000H)[-8.78162 -7.89795 -7.01428 -7.01425 -4.39478 -5.26257 -7.01428 -4.39478 -3.95294 -5.26257 -7.01428 -6.14648 -7.89795 -7.89795 -7.89795 -6.14648 0 ]ysh469.766 77.1935 mo(\000:\000D\000Y\000H\000O\000H\000Q)[-13.6228 -7.02222 -7.9201 -7.02222 -4.38202 -7.02222 0 ]yshgsave
455.727 77.1934 mo
472.286 77.1934 li
472.286 2.07343 li
455.727 2.07343 li
cp
clp
%ADOBeginSubsetFont: FUUQMX+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/FUUQMX+TimesNewRomanPSMT 1 GetGlyphDirectory74 <001C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F60847F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7FF4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93AEA8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02EA707BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7A8585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25BF9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4EA45E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFFD70E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC8191E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D3002781921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015D0BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD46F1C707> |!endend end
%ADOEndSubsetFont
SSJTFL+TimesNewRomanPSMT [0 -15.78 -15.78 0 0 0 ]msf469.767 22.2939 mo(\000J)shgrestore
%ADOBeginSubsetFont: FUUQMX+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/FUUQMX+TimesNewRomanPSMT 7 GetGlyphDirectory75 <001C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E027FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E97FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F735A795EACD82F245D81FB43B5> |24 <001C60D8A8C9B7A73DB97C1FD4849B14157B765BEEE66B9438731A1E1DBF6D904609867EBF49E3E19DC6BA786F7382AB36C8CFA3690DF4F8E7A258691DFDD71792965BBA1DCE407BE309901C1513A762BED3C73A852D4EDA1BE20A2B364C59E2224D36D9C8BEE5DE8D6C54C49D0F66DB7448A8FCE0E63D5DEE7BBBA026A808CDA9AD5556005639017FF42B963FB833B4B64B6445B350600BDCDD563F> |21 <001C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11EC41D90433CE0F55F0A42A96AF852FD50FA> |80 <001C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F249107C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18CE6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE955617323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D987ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFEC679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B517996> |37 <001C60D8A8C9B64EDFFBC13662E45548907DF94CFDD8366168A19798D3F94023374D4D2C86938E32D7DB9C1872F3A204253AB72EA5DE94FC03994C8EF8A3AEA69543654A5C81A183CE8AEAD100B0BA927EF2453AE33B886ED98847317AAC2483A7B07D884E6BA01DCB84EDD0DBB4BCDE82582971377C63466C51717F481B412F62082ABE2DA40B3D1CD64A6F92915DAB718445366AAC40CD207CDC2AEAFBF75F78F4F875F819FE068F712E647D09F9C9585654CB217F940FB0CC4A0399BD16E20306B0AE361121402EB02A27DB6252E098ADE7CC6B62128FF27D9B35E955978F8F1CC87FEE6B14877366567A52B860F7D53BC608D1A75802EE31B412> |42 <001C60D8A8C9B6079F6D6E36005945EC7274CF8CD5EF5B42D280E6D8A4F6086ADC4B88F4BA16F6A237691F3F760A6129A67DCE9322616B1D7BB21115511238376B94C01432A999E95ACF02B9743B28C7A3C8109C25013AEA47EC71807E3BFE6B26986496C6B96A2458AF130FF55F6939E40BA894719E24A717462CC4A00B11ADE5809AB1E0B4D7805897BE50087CD64F5AEA7744526E08B0D657538988C41BFE39A8735842D620E001E1A863F676AFB361CF4C81718CBC4A0CC5AC0D51A34ACA7D8BBE5B5D6E8D466D858B118FBBA2161DB0F7E151EB0958EF2C5C3F> |53 <001C60D8A8C9B64EDFFA947759DE5E4889D88CE18F8690AE99A205DDE2B03BD344BEA750622B2A044F453846260E52F609F4B4A04ACF011765AB379E687DE6B09D424D16AEE22850269A8AC1FBA0CB1130D1AA42D9BB70A20B4BABF919356C91EFB227A4D8127EEE951F8E9564FE86E42C72F4A2240B89192C9DDC8F972B78271704B555EEFB95806003600DA3EB98ED971FD7E60CB5D9582744AABB3235A69A23AA1EE2086410DF2F65A7A8081CD915B1599189D60C09010312710E9ABC20DA4562DBD2C8D044173C4F2A486F4032CE9228CB8A1897A7C6FF5127> |!endend end
%ADOEndSubsetFont
SSJTFL+TimesNewRomanPSMT [0 -15.78 -15.78 0 0 0 ]msf469.767 14.374 mo(\000W\000K)[-4.38202 0 ]ysh310.947 192.215 mo(\000\030\000\025\000\030\000\003\000Q\000P)[-7.9201 -7.9201 -7.9201 -3.83929 -7.9201 0 ]ysh363.447 285.214 mo(\000%\000\003\000F\000K\000D\000Q\000Q\000H\000O)[-10.5413 -3.96091 -7.02222 -7.90588 -7.02222 -7.90588 -7.90588 -7.02222 0 ]ysh362.368 198.634 mo(\000*\000F\000K\000D\000Q\000Q\000H\000O)[-15.3572 -7.02222 -7.91357 -7.02997 -7.91357 -7.91357 -7.02997 0 ]ysh363.447 120.933 mo(\0005\000F\000K\000D\000Q\000Q\000H\000O)[-14.461 -7.02222 -7.91357 -7.02991 -7.91364 -7.91357 -7.02991 0 ]ysh291.987 331.413 mo
291.567 331.413 li
291.567 16.1134 li
291.987 16.1134 li
cp
291.567 331.413 mo
cp
287.427 17.0134 mo
291.807 8.25342 li
296.187 17.0134 li
.75021 .679683 .670222 .90164 cmyk
f
292.227 330.693 mo
180.807 330.693 li
180.807 330.213 li
292.227 330.213 li
cp
181.647 334.833 mo
172.887 330.453 li
181.647 326.073 li
f
207.087 165.093 mo
209.067 165.093 li
209.067 167.073 li
207.087 167.073 li
cp
211.047 165.093 mo
213.027 165.093 li
213.027 167.073 li
211.047 167.073 li
cp
215.007 165.093 mo
216.927 165.093 li
216.927 167.073 li
215.007 167.073 li
cp
218.907 165.093 mo
220.887 165.093 li
220.887 167.073 li
218.907 167.073 li
cp
222.867 165.093 mo
224.847 165.093 li
224.847 167.073 li
222.867 167.073 li
cp
226.827 165.093 mo
228.807 165.093 li
228.807 167.073 li
226.827 167.073 li
cp
230.786 165.093 mo
232.767 165.093 li
232.767 167.073 li
230.786 167.073 li
cp
234.687 165.093 mo
236.667 165.093 li
236.667 167.073 li
234.687 167.073 li
cp
238.647 165.093 mo
240.627 165.093 li
240.627 167.073 li
238.647 167.073 li
cp
242.607 165.093 mo
244.587 165.093 li
244.587 167.073 li
242.607 167.073 li
cp
246.567 165.093 mo
248.547 165.093 li
248.547 167.073 li
246.567 167.073 li
cp
250.527 165.093 mo
252.447 165.093 li
252.447 167.073 li
250.527 167.073 li
cp
254.427 165.093 mo
256.407 165.093 li
256.407 167.073 li
254.427 167.073 li
cp
258.387 165.093 mo
260.367 165.093 li
260.367 167.073 li
258.387 167.073 li
cp
262.347 165.093 mo
264.327 165.093 li
264.327 167.073 li
262.347 167.073 li
cp
266.307 165.093 mo
268.227 165.093 li
268.227 167.073 li
266.307 167.073 li
cp
270.207 165.093 mo
272.187 165.093 li
272.187 167.073 li
270.207 167.073 li
cp
274.167 165.093 mo
276.147 165.093 li
276.147 167.073 li
274.167 167.073 li
cp
278.127 165.093 mo
280.107 165.093 li
280.107 167.073 li
278.127 167.073 li
cp
282.087 165.093 mo
284.067 165.093 li
284.067 167.073 li
282.087 167.073 li
cp
285.987 165.093 mo
287.967 165.093 li
287.967 167.073 li
285.987 167.073 li
cp
289.947 165.093 mo
291.626 165.093 li
291.626 167.073 li
289.947 167.073 li
cp
.467353 0 .87747 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FUUQMX+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/FUUQMX+TimesNewRomanPSMT 7 GetGlyphDirectory73 <001C60D8A8C9B81F2C3A6EB915F5DDF05E4CD39F13547A7EF54F9D79FF32092BEC553783B472AF53E99B3070692992C4C512F2D79447B5EC673AA5FA8274BFE5BA294793E06A2CD85C961166E35F08CE852DFFE5F2678D2E0B1687083D40FC628A3BE0EDFC936C866DE25768CCC0F39E7FAD6F5686BB7C64B79625F56C5573F9A5214AA079CAA28A8468CCF29829FD2A747DD586D41C21A37BF93A8AC8FDD941D5FFB6450DF53658C2420EB0E5E88807E727AED5F7> |71 <001C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D203065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A36815EA1CE5876FAC4F83CDFE1BD4A> |76 <001C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB8CA3E9F85837FAC6> |92 <001C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5BAF02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D574795119A3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50B8B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454DD6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9DBF9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F13518A71BC990F312D4821883A95164BCE1683B85434AFA8> |11 <001C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9AE12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA049D36B9B13B7F6C8AA7A4A5EB0> |91 <001C60D8A8C9B7A73DD670F5272DD145294083C4293196A1DBA349EF195DAADD76F8FA5D95CD31B7A1C2B32491F1D3BDEAF32234D0995EB67A2BEF06777B5B8AB01E1FC457D70FEE563CF2C0C851F3CC8B137B00E8CC0DDAE3A128D9A2319F3FF89B241236A311487E7B00ABDB18C5C11783A73226CB9112660CA25988169831DBD8D37F0570522652B666847FB24934B522403DA00EF77D9BF6494155BEACD6C4576905B10BBFDD62A70CAEE193F073806BE591E56E5DC8424D64A808D7528EBE8928C7E8D537D6DCC6918CF06863B4A936B7CA4331A2F9> |12 <001C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B540A016D558248DC4A3E8183F5F> |!endend end
%ADOEndSubsetFont
SSJTFL+TimesNewRomanPSMT [0 -15.78 -15.78 0 0 0 ]msf184.587 322.354 mo(\0005\000H\000I\000O\000H\000F\000W\000H\000G\000\003\000L\000Q\000W\000H\000Q\000V\000L\000W\000\\\000\003\000\013\000O\000L\000Q\000H\000\003\000S\000L\000[\000H\000O\000V\000\014)[-10.5316 -7.01257 -5.26089 -4.3931 -7.01257 -7.01257 -4.3931 -7.0126 -7.89627 -3.95123 -4.39313 -7.89624 -4.39313 -7.01257 -7.89624 -6.14484 -4.39307 -4.39307 -7.8963 -3.95123 -5.26086 -4.39313 -4.39313 -7.89624 -7.01257 -3.83929 -7.8963 -4.39307 -7.89624 -7.01257 -4.39313 -6.14484 0 ]ysh307.527 79.7743 mo(\000:\000D\000Y\000H\000O\000H\000Q\000J\000W\000K)[-13.6228 -7.02222 -7.90588 -7.02222 -4.40277 -7.02222 -7.90588 -7.90588 -4.40271 0 ]ysh180.088 356.434 mo(\000\013\000F\000\014)[-5.27509 -7.02679 0 ]ysh329.248 356.314 mo(\000\013\000H\000\014)[-5.27509 -7.02679 0 ]ysh289.947 708.333 mo
289.526 708.333 li
289.526 393.093 li
289.947 393.093 li
cp
289.527 708.333 mo
cp
285.327 393.933 mo
289.707 385.173 li
294.147 393.933 li
.75021 .679683 .670222 .90164 cmyk
f
289.707 708.153 mo
178.287 708.153 li
178.287 707.733 li
289.707 707.733 li
cp
179.187 712.353 mo
170.427 707.973 li
179.187 703.533 li
f
202.167 543.573 mo
204.147 543.573 li
204.147 545.553 li
202.167 545.553 li
cp
206.127 543.573 mo
208.047 543.573 li
208.047 545.553 li
206.127 545.553 li
cp
210.027 543.573 mo
212.007 543.573 li
212.007 545.553 li
210.027 545.553 li
cp
213.987 543.573 mo
215.967 543.573 li
215.967 545.553 li
213.987 545.553 li
cp
217.947 543.573 mo
219.927 543.573 li
219.927 545.553 li
217.947 545.553 li
cp
221.907 543.573 mo
223.887 543.573 li
223.887 545.553 li
221.907 545.553 li
cp
225.807 543.573 mo
227.787 543.573 li
227.787 545.553 li
225.807 545.553 li
cp
229.767 543.573 mo
231.747 543.573 li
231.747 545.553 li
229.767 545.553 li
cp
233.727 543.573 mo
235.707 543.573 li
235.707 545.553 li
233.727 545.553 li
cp
237.687 543.573 mo
239.667 543.573 li
239.667 545.553 li
237.687 545.553 li
cp
241.647 543.573 mo
243.567 543.573 li
243.567 545.553 li
241.647 545.553 li
cp
245.547 543.573 mo
247.527 543.573 li
247.527 545.553 li
245.547 545.553 li
cp
249.507 543.573 mo
251.487 543.573 li
251.487 545.553 li
249.507 545.553 li
cp
253.467 543.573 mo
255.447 543.573 li
255.447 545.553 li
253.467 545.553 li
cp
257.427 543.573 mo
259.407 543.573 li
259.407 545.553 li
257.427 545.553 li
cp
261.327 543.573 mo
263.307 543.573 li
263.307 545.553 li
261.327 545.553 li
cp
265.286 543.573 mo
267.267 543.573 li
267.267 545.553 li
265.286 545.553 li
cp
269.247 543.573 mo
271.227 543.573 li
271.227 545.553 li
269.247 545.553 li
cp
273.207 543.573 mo
275.187 543.573 li
275.187 545.553 li
273.207 545.553 li
cp
277.107 543.573 mo
279.087 543.573 li
279.087 545.553 li
277.107 545.553 li
cp
281.067 543.573 mo
283.047 543.573 li
283.047 545.553 li
281.067 545.553 li
cp
285.027 543.573 mo
287.007 543.573 li
287.007 545.553 li
285.027 545.553 li
cp
288.987 543.573 mo
290.967 543.573 li
290.967 545.553 li
288.987 545.553 li
cp
.467353 0 .87747 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FUUQMX+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/FUUQMX+TimesNewRomanPSMT 2 GetGlyphDirectory90 <001C60D8A8C9B6079F04262E67C9FB6DFF2B2A2909EEE6C74AA460646E6418023C6B7542892CB61B617E90DA8C58C94D261B2066526778FA77F05506A363FE5266E7C038D05568B67F867A9FF97988CC575C0A7C1F4DE18568CA203BA523917E8148BF72D6E4FEA4245E4F8E144E9C4F6DDF7EC6DAC323FEA1568E1A6C8D8526507DC2E91B066C274F65DD58F049FFA3E606BF021DDA3B6174F51DB721A6C7E1197FF1898AE92ADB1C1DD84FD7DEC1> |69 <001C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9AF110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D399924398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D6603C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83F23AED1F56FC130F21> |!endend end
%ADOEndSubsetFont
SSJTFL+TimesNewRomanPSMT [0 -15.78 -15.78 0 0 0 ]msf184.587 699.214 mo(\0005\000H\000I\000O\000H\000F\000W\000H\000G\000\003\000L\000Q\000W\000H\000Q\000V\000L\000W\000\\\000\003\000\013\000Z\000K\000L\000W\000H\000\003\000S\000L\000[\000H\000O\000V\000\014)[-10.5285 -7.00946 -5.25775 -4.39001 -7.0094 -7.00946 -4.39001 -7.0094 -7.89313 -3.94818 -4.38995 -7.89313 -4.38995 -7.00946 -7.89313 -6.14166 -4.38995 -4.39001 -7.89313 -3.94812 -5.25775 -11.3963 -7.89313 -4.38995 -4.38995 -7.00946 -3.83929 -7.9201 -4.38995 -7.89313 -7.00946 -4.38995 -6.14166 0 ]ysh306.566 453.994 mo(\000:\000D\000Y\000H\000O\000H\000Q\000J\000W\000K)[-13.6228 -7.02219 -7.90591 -7.02222 -4.40271 -7.02222 -7.90591 -7.90588 -4.40271 0 ]ysh180.086 733.474 mo(\000\013\000E\000\014)[-5.28302 -7.9184 0 ]ysh311.066 569.375 mo(\000\030\000\025\000\030\000\003\000Q\000P)[-7.9201 -7.9201 -7.9201 -3.83929 -7.9201 0 ]ysh127.107 471.993 mo
126.626 471.993 li
126.626 243.753 li
127.107 243.753 li
cp
126.627 471.993 mo
cp
122.487 244.593 mo
126.867 235.833 li
131.247 244.593 li
.75021 .679683 .670222 .90164 cmyk
f
127.287 471.273 mo
15.8665 471.273 li
15.8665 470.793 li
127.287 470.793 li
cp
16.7665 475.413 mo
7.94651 471.033 li
16.7665 466.653 li
f
28.2865 352.233 mo
30.2665 352.233 li
30.2665 354.213 li
28.2865 354.213 li
cp
32.2465 352.233 mo
34.2265 352.233 li
34.2265 354.213 li
32.2465 354.213 li
cp
36.2065 352.233 mo
38.1865 352.233 li
38.1865 354.213 li
36.2065 354.213 li
cp
40.1065 352.233 mo
42.0865 352.233 li
42.0865 354.213 li
40.1065 354.213 li
cp
44.0665 352.233 mo
46.0465 352.233 li
46.0465 354.213 li
44.0665 354.213 li
cp
48.0265 352.233 mo
50.0065 352.233 li
50.0065 354.213 li
48.0265 354.213 li
cp
51.9865 352.233 mo
53.9665 352.233 li
53.9665 354.213 li
51.9865 354.213 li
cp
55.8865 352.233 mo
57.8665 352.233 li
57.8665 354.213 li
55.8865 354.213 li
cp
59.8465 352.233 mo
61.8265 352.233 li
61.8265 354.213 li
59.8465 354.213 li
cp
63.8065 352.233 mo
65.7865 352.233 li
65.7865 354.213 li
63.8065 354.213 li
cp
67.7665 352.233 mo
69.7465 352.233 li
69.7465 354.213 li
67.7665 354.213 li
cp
71.7265 352.233 mo
73.6465 352.233 li
73.6465 354.213 li
71.7265 354.213 li
cp
75.6265 352.233 mo
77.6065 352.233 li
77.6065 354.213 li
75.6265 354.213 li
cp
79.5865 352.233 mo
81.5665 352.233 li
81.5665 354.213 li
79.5865 354.213 li
cp
83.5465 352.233 mo
85.5265 352.233 li
85.5265 354.213 li
83.5465 354.213 li
cp
87.5065 352.233 mo
89.4865 352.233 li
89.4865 354.213 li
87.5065 354.213 li
cp
91.4065 352.233 mo
93.3865 352.233 li
93.3865 354.213 li
91.4065 354.213 li
cp
95.3665 352.233 mo
97.3465 352.233 li
97.3465 354.213 li
95.3665 354.213 li
cp
99.3265 352.233 mo
101.307 352.233 li
101.307 354.213 li
99.3265 354.213 li
cp
103.287 352.233 mo
105.267 352.233 li
105.267 354.213 li
103.287 354.213 li
cp
107.247 352.233 mo
109.167 352.233 li
109.167 354.213 li
107.247 354.213 li
cp
111.147 352.233 mo
113.127 352.233 li
113.127 354.213 li
111.147 354.213 li
cp
115.107 352.233 mo
117.087 352.233 li
117.087 354.213 li
115.107 354.213 li
cp
119.067 352.233 mo
121.047 352.233 li
121.047 354.213 li
119.067 354.213 li
cp
123.027 352.233 mo
124.947 352.233 li
124.947 354.213 li
123.027 354.213 li
cp
.467353 0 .87747 0 cmyk
f
123.147 397.653 mo
123.327 396.873 li
123.327 396.933 li
123.447 396.153 li
123.447 396.213 li
123.507 395.433 li
123.507 395.493 li
123.567 395.133 li
123.567 395.193 li
123.567 394.773 li
123.567 394.833 li
123.507 394.413 li
123.507 394.473 li
123.447 394.053 li
123.507 394.113 li
123.387 393.693 li
123.387 393.753 li
123.267 393.333 li
123.327 393.393 li
123.147 392.973 li
123.147 393.033 li
122.967 392.553 li
122.967 392.613 li
122.727 392.133 li
122.787 392.193 li
122.487 391.713 li
121.887 390.693 li
121.167 389.613 li
121.227 389.613 li
120.807 389.013 li
120.867 389.073 li
120.447 388.473 li
120.027 387.933 li
120.087 387.933 li
119.547 387.333 li
119.607 387.393 li
118.527 386.193 li
118.527 386.253 li
117.867 385.653 li
117.927 385.653 li
117.207 385.053 li
117.207 385.113 li
116.427 384.513 li
115.587 383.913 li
115.587 383.973 li
114.627 383.373 li
114.087 383.133 li
114.147 383.133 li
113.607 382.833 li
113.007 382.533 li
113.007 382.593 li
112.407 382.293 li
112.467 382.293 li
111.807 381.993 li
111.147 381.753 li
111.207 381.753 li
110.487 381.453 li
109.767 381.213 li
109.827 381.213 li
106.827 380.133 li
89.2115 374.764 71.7165 369.258 54.1465 363.753 cv
53.3065 363.453 li
52.4665 363.213 li
51.6865 362.973 li
48.6845 361.996 45.6675 361.079 42.6865 360.033 cv
41.9065 359.793 li
41.1865 359.553 li
39.0905 358.816 37.2045 358.262 35.1865 357.333 cv
35.0665 357.213 li
34.9465 357.153 li
34.7665 357.033 li
34.8265 357.033 li
34.6465 356.913 li
34.6465 356.973 li
34.5265 356.853 li
34.5865 356.913 li
34.4665 356.853 li
33.8065 356.553 li
32.7235 356.041 32.0395 355.659 31.0465 354.993 cv
30.8065 354.813 li
30.6265 354.633 li
30.1455 354.196 29.7725 353.802 29.8465 353.073 cv
30.0865 352.653 li
30.2665 352.413 li
31.7665 353.673 li
31.6465 353.793 li
31.8265 353.553 li
31.7665 353.733 li
31.8265 353.313 li
31.8265 353.373 li
31.8265 353.133 li
31.8265 353.253 li
31.7665 352.953 li
31.7665 353.073 li
31.7065 352.953 li
31.7665 353.013 li
31.7065 352.953 li
31.8265 353.073 li
31.7665 353.013 li
31.9465 353.133 li
31.8865 353.133 li
32.2465 353.373 li
32.1865 353.373 li
32.6665 353.673 li
32.6065 353.673 li
33.0865 353.973 li
33.0265 353.913 li
33.5665 354.213 li
33.5065 354.213 li
34.0465 354.453 li
34.7235 354.83 35.4735 355.059 36.0865 355.533 cv
36.1465 355.593 li
36.1465 355.533 li
36.2065 355.593 li
36.4465 355.713 li
36.3865 355.713 li
36.6265 355.833 li
36.5665 355.773 li
36.8065 355.893 li
37.1065 356.013 li
37.4665 356.133 li
37.4065 356.133 li
37.8265 356.313 li
38.3065 356.493 li
54.4725 361.993 70.8735 366.828 87.1465 372.033 cv
91.0465 373.293 li
94.8865 374.433 li
96.8065 374.973 li
103.813 377.3 111.312 378.781 117.567 382.893 cv
118.407 383.553 li
119.187 384.153 li
121.449 386.08 126.2 392.388 125.487 395.613 cv
125.427 396.513 li
125.067 398.073 li
f
123.147 308.793 mo
123.327 309.573 li
123.327 309.513 li
123.447 310.293 li
123.447 310.233 li
123.507 311.013 li
123.507 310.893 li
123.567 311.313 li
123.567 311.253 li
123.567 311.673 li
123.567 311.613 li
123.507 312.033 li
123.507 311.973 li
123.447 312.393 li
123.507 312.273 li
123.387 312.753 li
123.387 312.633 li
123.267 313.113 li
123.327 313.053 li
123.147 313.473 li
123.147 313.413 li
122.967 313.893 li
122.967 313.833 li
122.727 314.313 li
122.787 314.253 li
122.487 314.733 li
121.887 315.753 li
121.167 316.833 li
121.227 316.833 li
120.807 317.433 li
120.867 317.373 li
120.447 317.973 li
120.447 317.913 li
120.027 318.513 li
119.547 319.113 li
119.607 319.053 li
119.067 319.653 li
119.067 319.593 li
118.527 320.253 li
118.527 320.193 li
117.867 320.793 li
117.927 320.733 li
117.207 321.333 li
116.427 321.933 li
116.007 322.173 li
115.587 322.473 li
114.627 323.073 li
114.627 323.013 li
114.087 323.313 li
114.147 323.313 li
113.607 323.613 li
113.007 323.853 li
112.407 324.153 li
112.467 324.153 li
111.807 324.393 li
111.147 324.693 li
111.207 324.693 li
110.487 324.933 li
109.767 325.233 li
109.827 325.233 li
106.827 326.313 li
105.207 326.853 li
103.527 327.393 li
103.527 327.333 li
101.787 327.873 li
95.6885 329.738 89.5635 331.523 83.4865 333.453 cv
82.4065 333.813 li
82.4665 333.813 li
80.1865 334.533 li
69.7175 337.788 59.2475 341.054 48.8065 344.373 cv
48.2065 344.553 li
47.6065 344.793 li
43.6225 346.13 38.8355 347.448 35.0665 349.173 cv
34.9465 349.293 li
34.7665 349.413 li
34.8265 349.353 li
34.6465 349.473 li
34.5265 349.533 li
34.5865 349.533 li
34.4665 349.593 li
33.8065 349.893 li
32.9645 350.334 31.7665 350.851 31.0465 351.453 cv
30.8065 351.633 li
30.6265 351.813 li
30.4465 351.933 li
30.2665 352.113 li
30.0865 352.353 li
29.9665 352.593 li
29.8465 352.953 li
29.8465 353.313 li
30.0865 353.793 li
30.2065 353.973 li
31.7665 352.713 li
31.7065 352.653 li
31.8265 352.833 li
31.7665 352.713 li
31.8265 353.133 li
31.8265 353.073 li
31.8265 353.253 li
31.8265 353.193 li
31.7665 353.433 li
31.7665 353.373 li
31.7065 353.493 li
31.7665 353.373 li
31.7065 353.493 li
31.8265 353.373 li
31.7665 353.373 li
31.9465 353.253 li
31.8865 353.313 li
32.0665 353.133 li
32.0665 353.193 li
32.2465 353.013 li
32.1865 353.073 li
32.6665 352.713 li
32.6065 352.773 li
33.0865 352.473 li
33.0265 352.473 li
33.5665 352.233 li
33.5065 352.233 li
34.0465 351.933 li
34.5115 351.772 35.6975 351.199 36.1465 350.853 cv
36.2065 350.793 li
36.2065 350.853 li
36.3265 350.733 li
36.3265 350.793 li
36.4465 350.673 li
36.3865 350.733 li
36.6265 350.613 li
36.5665 350.613 li
36.8065 350.493 li
36.8065 350.553 li
37.1065 350.433 li
37.4065 350.253 li
37.4065 350.313 li
37.8265 350.133 li
39.3815 349.573 40.9345 349.018 42.5065 348.513 cv
43.2865 348.213 li
43.2865 348.273 li
44.1265 347.973 li
47.1095 347.011 50.0755 346.022 53.0665 345.093 cv
53.9065 344.853 li
53.8465 344.853 li
55.6465 344.253 li
56.6065 343.953 li
65.0525 341.339 73.4985 338.713 81.9265 336.033 cv
83.0065 335.673 li
84.0865 335.373 li
92.8125 332.384 101.812 330.239 110.487 327.093 cv
111.927 326.493 li
112.587 326.253 li
113.247 325.953 li
116.461 324.433 119.435 322.626 121.587 319.713 cv
122.067 319.113 li
122.487 318.513 li
124.014 315.828 125.789 314.039 125.487 310.773 cv
125.427 309.933 li
125.067 308.373 li
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FUUQMX+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/FUUQMX+TimesNewRomanPSMT 1 GetGlyphDirectory40 <001C60D8A8C9B7D8BE19945133FE501067A24BBF08B984801DD42E090C7BFCA94BE6C4AA953A8A674F2ED3DEE261A8700CA873A3A1D3699D8129F8FA28DE52C44FD8214EA37190B26E64C97677BF6E1856F59EF49286A31D4133D861C74CDB92794376B13E311920B8F547FC8F105147550894C833300FA326DF7877402F2A3FD3184C9B8E130B79DB62E2735C65FD4E7A86140D8A7D764E8F05488CC1949558757A62743714E5384E2EF166B32CB849712A9C93B7CF04FCFE8063494A215FA79B98816AEC20BC3F> |!endend end
%ADOEndSubsetFont
SSJTFL+TimesNewRomanPSMT [0 -15.78 -15.78 0 0 0 ]msf17.9665 463.774 mo(\000\(\000P\000L\000W\000W\000L\000Q\000J\000\003\000L\000Q\000W\000H\000Q\000V\000L\000W\000\\)[-9.64941 -12.2848 -4.39478 -4.39478 -4.39478 -4.39481 -7.89792 -7.89795 -3.83929 -4.39481 -7.89795 -4.39478 -7.01425 -7.89795 -6.14648 -4.39481 -4.39478 0 ]ysh145.647 298.414 mo(\000:\000D\000Y\000H\000O\000H\000Q\000J\000W\000K)[-13.6228 -7.02222 -7.90588 -7.02222 -4.40271 -7.02222 -7.90588 -7.90588 -4.40277 0 ]ysh17.9665 501.933 mo(\000\013\000D\000\014)[-5.27509 -7.02679 0 ]ysh147.206 372.453 mo(\000\030\000\025\000\030\000\003\000Q\000P)[-7.9201 -7.9201 -7.92007 -3.83929 -7.9201 0 ]ysh452.427 707.253 mo
451.947 707.253 li
451.947 391.953 li
452.427 391.953 li
cp
451.947 707.253 mo
cp
447.807 392.853 mo
452.187 384.093 li
456.567 392.853 li
.75021 .679683 .670222 .90164 cmyk
f
450.747 707.193 mo
339.327 707.193 li
339.327 706.773 li
450.747 706.773 li
cp
340.167 711.393 mo
331.407 707.013 li
340.167 702.633 li
f
319.407 542.493 mo
321.327 542.493 li
321.327 544.413 li
319.407 544.413 li
cp
323.307 542.493 mo
325.287 542.493 li
325.287 544.413 li
323.307 544.413 li
cp
327.267 542.493 mo
329.247 542.493 li
329.247 544.413 li
327.267 544.413 li
cp
331.227 542.493 mo
333.207 542.493 li
333.207 544.413 li
331.227 544.413 li
cp
335.187 542.493 mo
337.107 542.493 li
337.107 544.413 li
335.187 544.413 li
cp
339.087 542.493 mo
341.067 542.493 li
341.067 544.413 li
339.087 544.413 li
cp
343.047 542.493 mo
345.027 542.493 li
345.027 544.413 li
343.047 544.413 li
cp
347.007 542.493 mo
348.987 542.493 li
348.987 544.413 li
347.007 544.413 li
cp
350.967 542.493 mo
352.947 542.493 li
352.947 544.413 li
350.967 544.413 li
cp
354.867 542.493 mo
356.847 542.493 li
356.847 544.413 li
354.867 544.413 li
cp
358.827 542.493 mo
360.807 542.493 li
360.807 544.413 li
358.827 544.413 li
cp
362.786 542.493 mo
364.767 542.493 li
364.767 544.413 li
362.786 544.413 li
cp
366.747 542.493 mo
368.727 542.493 li
368.727 544.413 li
366.747 544.413 li
cp
370.707 542.493 mo
372.627 542.493 li
372.627 544.413 li
370.707 544.413 li
cp
374.607 542.493 mo
376.587 542.493 li
376.587 544.413 li
374.607 544.413 li
cp
378.567 542.493 mo
380.547 542.493 li
380.547 544.413 li
378.567 544.413 li
cp
382.527 542.493 mo
384.507 542.493 li
384.507 544.413 li
382.527 544.413 li
cp
386.487 542.493 mo
388.467 542.493 li
388.467 544.413 li
386.487 544.413 li
cp
390.387 542.493 mo
392.367 542.493 li
392.367 544.413 li
390.387 544.413 li
cp
394.347 542.493 mo
396.327 542.493 li
396.327 544.413 li
394.347 544.413 li
cp
398.307 542.493 mo
400.287 542.493 li
400.287 544.413 li
398.307 544.413 li
cp
402.267 542.493 mo
404.247 542.493 li
404.247 544.413 li
402.267 544.413 li
cp
406.167 542.493 mo
408.147 542.493 li
408.147 544.413 li
406.167 544.413 li
cp
410.127 542.493 mo
412.107 542.493 li
412.107 544.413 li
410.127 544.413 li
cp
414.087 542.493 mo
416.067 542.493 li
416.067 544.413 li
414.087 544.413 li
cp
418.047 542.493 mo
420.027 542.493 li
420.027 544.413 li
418.047 544.413 li
cp
422.007 542.493 mo
423.927 542.493 li
423.927 544.413 li
422.007 544.413 li
cp
425.907 542.493 mo
427.887 542.493 li
427.887 544.413 li
425.907 544.413 li
cp
429.867 542.493 mo
431.847 542.493 li
431.847 544.413 li
429.867 544.413 li
cp
433.827 542.493 mo
435.807 542.493 li
435.807 544.413 li
433.827 544.413 li
cp
437.786 542.493 mo
439.767 542.493 li
439.767 544.413 li
437.786 544.413 li
cp
441.687 542.493 mo
443.667 542.493 li
443.667 544.413 li
441.687 544.413 li
cp
445.647 542.493 mo
447.627 542.493 li
447.627 544.413 li
445.647 544.413 li
cp
449.607 542.493 mo
451.586 542.493 li
451.586 544.413 li
449.607 544.413 li
cp
453.567 542.493 mo
453.627 542.493 li
453.627 544.413 li
453.567 544.413 li
cp
.467353 0 .87747 0 cmyk
f
449.667 643.533 mo
449.786 641.853 li
449.906 640.113 li
449.906 640.173 li
449.966 638.433 li
450.026 636.693 li
449.966 635.793 li
449.906 634.893 li
449.846 633.933 li
449.727 632.973 li
449.786 632.973 li
449.606 632.013 li
449.426 630.993 li
449.486 630.993 li
449.246 629.913 li
449.246 629.973 li
449.007 628.893 li
448.706 627.753 li
448.466 626.553 li
448.167 625.293 li
448.167 625.353 li
447.866 624.093 li
447.566 622.773 li
447.566 622.833 li
446.846 620.193 li
446.007 617.553 li
445.466 616.173 li
445.466 616.233 li
444.926 614.853 li
444.926 614.913 li
444.326 613.533 li
444.326 613.593 li
443.606 612.213 li
443.667 612.273 li
442.886 610.953 li
442.046 609.693 li
441.626 609.033 li
441.626 609.093 li
441.146 608.433 li
440.667 607.833 li
440.186 607.173 li
440.186 607.233 li
439.046 605.973 li
439.106 605.973 li
437.906 604.773 li
436.646 603.573 li
430.792 598.224 424.042 593.54 417.926 588.453 cv
417.086 587.733 li
416.186 587.013 li
408.672 580.662 400.906 574.513 393.326 568.233 cv
392.486 567.513 li
391.586 566.853 li
391.646 566.853 li
390.806 566.133 li
390.026 565.533 li
386.99 562.953 383.818 560.436 380.846 557.793 cv
380.126 557.133 li
379.466 556.593 li
377.611 554.881 375.096 552.98 373.646 550.953 cv
373.286 550.353 li
373.346 550.413 li
373.167 550.113 li
373.227 550.173 li
373.107 550.053 li
372.986 549.873 li
372.986 549.933 li
372.447 549.213 li
371.906 548.553 li
371.118 547.527 370.509 546.592 369.926 545.433 cv
369.746 545.073 li
369.626 544.713 li
369.314 543.942 369.311 544.048 369.327 543.213 cv
369.387 542.793 li
369.507 542.493 li
371.366 543.093 li
371.306 543.333 li
371.306 543.213 li
371.306 543.513 li
371.306 543.333 li
371.306 543.513 li
371.306 543.393 li
371.306 543.573 li
371.306 543.453 li
371.306 543.633 li
371.306 543.573 li
371.366 543.813 li
371.366 543.753 li
371.426 543.993 li
371.546 544.293 li
371.546 544.233 li
371.727 544.533 li
371.667 544.533 li
371.846 544.893 li
371.846 544.833 li
372.206 545.553 li
372.206 545.493 li
372.626 546.213 li
372.566 546.153 li
373.046 546.753 li
372.986 546.753 li
373.466 547.353 li
373.98 548.029 374.615 548.642 375.026 549.393 cv
375.206 549.693 li
375.146 549.633 li
375.327 549.933 li
375.266 549.873 li
375.387 550.053 li
375.387 549.993 li
375.507 550.173 li
375.686 550.353 li
375.626 550.353 li
375.866 550.593 li
375.806 550.533 li
376.107 550.833 li
376.046 550.773 li
376.346 551.133 li
376.346 551.073 li
376.706 551.433 li
390.776 564.238 406.322 575.977 420.866 588.273 cv
422.546 589.653 li
422.486 589.653 li
424.167 590.973 li
439.397 602.869 446.238 606.479 450.386 626.073 cv
450.686 627.273 li
450.626 627.273 li
450.926 628.413 li
452.04 632.839 452.18 637.443 451.766 641.973 cv
451.646 643.713 li
f
449.667 442.773 mo
449.906 446.133 li
449.966 447.873 li
449.966 447.813 li
450.026 449.613 li
450.026 449.553 li
449.966 450.513 li
449.966 450.453 li
449.906 451.413 li
449.906 451.353 li
449.846 452.373 li
449.846 452.313 li
449.727 453.273 li
449.786 453.273 li
449.606 454.293 li
449.606 454.233 li
449.426 455.313 li
449.486 455.253 li
449.246 456.333 li
448.688 458.713 448.145 461.096 447.566 463.473 cv
447.206 464.793 li
447.206 464.733 li
446.846 466.113 li
446.846 466.053 li
446.426 467.433 li
446.426 467.373 li
446.007 468.753 li
446.007 468.693 li
445.466 470.073 li
445.466 470.013 li
444.926 471.393 li
444.326 472.713 li
443.606 474.033 li
443.667 473.973 li
442.886 475.353 li
442.886 475.293 li
442.046 476.613 li
442.046 476.553 li
441.626 477.213 li
441.146 477.873 li
441.146 477.813 li
440.667 478.473 li
440.667 478.413 li
440.186 479.073 li
439.046 480.273 li
439.106 480.273 li
437.906 481.473 li
436.646 482.673 li
430.771 488.104 424 492.658 417.926 497.853 cv
417.086 498.573 li
416.186 499.293 li
408.62 505.593 400.975 511.81 393.326 518.013 cv
392.486 518.733 li
391.586 519.453 li
391.646 519.393 li
390.806 520.113 li
390.026 520.773 li
386.956 523.243 383.806 525.861 380.846 528.453 cv
380.126 529.113 li
379.466 529.653 li
377.613 531.396 375.089 533.266 373.646 535.293 cv
373.286 535.893 li
373.346 535.833 li
373.167 536.133 li
373.227 536.073 li
373.107 536.193 li
372.986 536.373 li
372.986 536.313 li
372.447 537.033 li
371.906 537.693 li
371.158 538.692 370.421 539.722 369.926 540.873 cv
369.746 541.173 li
369.626 541.533 li
369.314 542.304 369.311 542.198 369.327 543.033 cv
369.387 543.453 li
369.507 543.753 li
371.366 543.153 li
371.306 542.913 li
371.306 543.033 li
371.306 542.733 li
371.306 542.913 li
371.306 542.793 li
371.306 542.853 li
371.306 542.673 li
371.306 542.793 li
371.306 542.613 li
371.306 542.673 li
371.366 542.433 li
371.366 542.493 li
371.426 542.253 li
371.546 542.013 li
371.727 541.713 li
371.667 541.713 li
371.846 541.353 li
371.846 541.413 li
372.206 540.693 li
372.206 540.753 li
372.626 540.033 li
372.566 540.093 li
373.046 539.493 li
372.986 539.493 li
373.466 538.893 li
374.014 538.332 374.616 537.546 375.026 536.853 cv
375.206 536.553 li
375.146 536.613 li
375.327 536.313 li
375.266 536.373 li
375.387 536.193 li
375.387 536.253 li
375.507 536.073 li
375.686 535.893 li
375.626 535.893 li
375.866 535.653 li
375.806 535.713 li
376.107 535.413 li
376.046 535.473 li
377.126 534.393 li
377.126 534.453 li
378.026 533.553 li
378.931 532.76 379.832 531.958 380.727 531.153 cv
381.387 530.553 li
381.387 530.613 li
382.107 529.953 li
394.861 519.095 408.003 508.708 420.866 497.973 cv
422.546 496.653 li
422.486 496.653 li
424.167 495.333 li
439.331 483.382 446.257 479.829 450.386 460.173 cv
450.686 458.973 li
450.626 458.973 li
450.926 457.833 li
452.055 453.409 452.171 448.801 451.766 444.273 cv
451.646 442.593 li
f
450.987 583.893 mo
451.107 582.333 li
451.167 580.713 li
451.227 579.093 li
451.227 577.413 li
451.167 575.673 li
451.107 574.773 li
451.107 574.833 li
450.987 572.913 li
450.987 572.973 li
450.866 571.953 li
450.866 572.013 li
450.746 570.993 li
450.399 568.74 450.079 566.47 449.727 564.213 cv
449.487 562.953 li
449.487 563.013 li
449.246 561.753 li
449.306 561.753 li
449.007 560.493 li
448.767 559.233 li
448.466 557.913 li
448.466 557.973 li
448.107 556.653 li
448.107 556.713 li
447.746 555.393 li
447.746 555.453 li
447.327 554.193 li
446.846 552.933 li
446.846 552.993 li
446.366 551.733 li
446.366 551.793 li
445.767 550.533 li
445.827 550.593 li
445.167 549.393 li
445.227 549.393 li
444.507 548.253 li
444.566 548.253 li
443.786 547.113 li
443.846 547.113 li
443.066 545.973 li
442.227 544.833 li
442.286 544.833 li
441.447 543.693 li
438.275 539.598 434.764 535.795 431.667 531.633 cv
430.586 530.253 li
430.586 530.313 li
429.507 528.873 li
428.306 527.313 li
422.599 520.051 416.819 512.803 411.207 505.473 cv
410.607 504.693 li
410.066 503.973 li
408.426 501.669 405.646 498.382 404.547 495.873 cv
404.487 495.633 li
404.366 495.393 li
404.426 495.453 li
404.246 495.153 li
404.306 495.213 li
403.947 494.553 li
403.241 493.022 401.866 490.461 402.086 488.673 cv
402.146 488.373 li
404.126 488.793 li
404.066 489.033 li
404.066 488.913 li
404.066 489.153 li
404.066 489.033 li
404.066 489.393 li
404.066 489.273 li
404.066 489.453 li
404.066 489.393 li
404.126 489.633 li
404.066 489.573 li
404.126 489.813 li
404.246 490.053 li
404.186 490.053 li
404.306 490.353 li
404.426 490.653 li
404.607 491.313 li
404.607 491.253 li
404.846 491.913 li
404.846 491.853 li
405.086 492.453 li
405.387 493.053 li
405.387 492.993 li
405.686 493.653 li
406.047 494.313 li
406.227 494.673 li
406.346 494.973 li
406.406 495.213 li
406.526 495.453 li
406.526 495.393 li
406.586 495.573 li
406.526 495.513 li
406.646 495.693 li
406.586 495.693 li
406.827 496.053 li
406.947 496.293 li
407.126 496.593 li
407.126 496.533 li
407.607 497.253 li
408.146 498.093 li
408.146 498.033 li
408.746 498.933 li
409.107 499.353 li
409.827 500.313 li
410.186 500.853 li
410.667 501.453 li
410.607 501.453 li
411.086 502.113 li
411.626 502.773 li
421.344 515.34 431.107 527.9 441.146 540.213 cv
442.107 541.353 li
443.007 542.493 li
443.846 543.693 li
447.728 548.813 449.668 553.835 450.987 560.073 cv
451.227 561.393 li
451.466 562.653 li
452.274 568.118 453.444 573.594 453.146 579.153 cv
453.146 580.773 li
453.026 582.453 li
452.966 584.013 li
0 .993988 1 0 cmyk
f
450.987 393.873 mo
451.107 395.493 li
451.167 397.113 li
451.167 397.053 li
451.227 398.733 li
451.227 398.673 li
451.227 400.413 li
451.227 400.353 li
451.167 402.153 li
451.167 402.093 li
451.107 402.993 li
451.047 403.953 li
451.047 403.893 li
450.987 404.853 li
450.866 405.813 li
450.746 406.833 li
450.746 406.773 li
450.566 407.853 li
450.446 408.933 li
450.086 411.213 li
449.906 412.413 li
449.906 412.353 li
449.727 413.613 li
449.487 414.813 li
449.246 416.073 li
449.306 416.073 li
449.007 417.333 li
448.767 418.593 li
448.466 419.853 li
447.746 422.373 li
447.327 423.633 li
447.327 423.573 li
446.846 424.893 li
446.846 424.833 li
446.366 426.093 li
446.366 426.033 li
445.767 427.233 li
445.827 427.233 li
445.167 428.433 li
445.227 428.373 li
444.507 429.573 li
444.566 429.513 li
443.786 430.713 li
443.846 430.713 li
443.066 431.853 li
443.066 431.793 li
442.227 432.993 li
442.286 432.933 li
441.447 434.073 li
440.547 435.213 li
431.62 445.894 423.319 456.986 414.626 467.853 cv
414.207 468.453 li
413.727 468.993 li
411.018 472.864 406.638 477.734 404.547 481.893 cv
404.487 482.133 li
404.366 482.373 li
404.426 482.313 li
404.246 482.613 li
404.306 482.613 li
403.947 483.273 li
403.212 484.697 401.875 487.392 402.086 489.093 cv
402.146 489.393 li
404.066 489.033 li
404.066 488.793 li
404.066 488.853 li
404.066 488.613 li
404.066 488.733 li
404.066 488.433 li
404.066 488.493 li
404.066 488.313 li
404.066 488.373 li
404.126 488.133 li
404.066 488.193 li
404.126 487.953 li
404.126 488.013 li
404.246 487.713 li
404.186 487.713 li
404.306 487.413 li
404.306 487.473 li
404.426 487.113 li
404.607 486.453 li
404.607 486.513 li
404.846 485.853 li
404.846 485.913 li
405.086 485.313 li
405.086 485.373 li
405.686 484.173 li
406.047 483.513 li
406.227 483.153 li
406.346 482.793 li
406.406 482.553 li
406.406 482.613 li
406.526 482.313 li
406.526 482.373 li
406.586 482.193 li
406.526 482.253 li
406.646 482.073 li
406.586 482.133 li
406.707 481.953 li
406.827 481.713 li
406.827 481.773 li
406.947 481.473 li
406.947 481.533 li
407.126 481.233 li
407.366 480.873 li
407.366 480.933 li
407.607 480.513 li
408.414 479.264 409.374 478.135 410.186 476.913 cv
410.667 476.313 li
410.607 476.313 li
411.086 475.713 li
418.685 465.758 426.543 455.963 434.246 446.073 cv
435.267 444.753 li
435.267 444.813 li
436.286 443.553 li
437.246 442.293 li
437.246 442.353 li
439.227 439.953 li
440.246 438.753 li
445.592 432.243 448.861 427.392 450.686 419.013 cv
450.987 417.753 li
451.227 416.433 li
452.337 409.779 453.512 403.794 453.146 396.993 cv
453.026 395.373 li
452.966 393.813 li
f
449.727 727.293 mo
449.846 725.493 li
449.966 723.693 li
449.906 723.693 li
449.966 721.893 li
450.026 719.973 li
450.026 720.033 li
449.966 719.013 li
449.966 719.073 li
449.966 718.053 li
449.906 717.033 li
449.846 716.013 li
449.727 714.933 li
449.727 714.993 li
449.606 713.853 li
449.606 713.913 li
449.426 712.773 li
448.823 708.818 448.204 704.868 447.386 700.953 cv
447.026 699.513 li
447.026 699.573 li
446.666 698.133 li
446.246 696.693 li
445.766 695.253 li
445.826 695.313 li
445.286 693.873 li
445.286 693.933 li
444.746 692.493 li
444.746 692.553 li
444.146 691.113 li
444.146 691.173 li
443.426 689.793 li
443.486 689.853 li
442.706 688.473 li
442.706 688.533 li
441.926 687.213 li
441.026 685.893 li
441.086 685.953 li
440.126 684.633 li
439.166 683.373 li
438.146 682.113 li
434.138 677.22 429.672 672.717 425.727 667.773 cv
425.066 667.053 li
423.746 665.433 li
418.401 659.047 412.964 652.734 407.606 646.353 cv
406.947 645.633 li
406.346 644.913 li
405.806 644.193 li
405.206 643.533 li
402.786 640.63 400.36 637.672 398.007 634.713 cv
397.526 634.173 li
397.106 633.633 li
395.965 632.028 394.648 630.534 393.746 628.773 cv
393.626 628.413 li
393.507 628.173 li
393.386 627.873 li
393.386 627.933 li
393.326 627.753 li
393.326 627.813 li
393.266 627.633 li
392.329 626.044 390.27 622.363 390.626 620.373 cv
390.686 620.073 li
392.606 620.433 li
392.546 620.733 li
392.606 620.613 li
392.546 620.913 li
392.546 620.793 li
392.546 620.973 li
392.546 620.913 li
392.546 621.093 li
392.546 621.033 li
392.606 621.273 li
392.606 621.153 li
392.606 621.453 li
392.606 621.393 li
392.666 621.693 li
392.666 621.633 li
392.786 621.933 li
392.906 622.293 li
392.846 622.233 li
392.966 622.593 li
393.566 624.033 li
393.566 623.973 li
394.166 625.293 li
394.166 625.233 li
394.586 625.953 li
394.784 626.212 395.352 627.303 395.426 627.693 cv
395.546 627.993 li
395.546 627.933 li
395.606 628.113 li
395.606 628.053 li
395.727 628.293 li
395.666 628.233 li
395.786 628.473 li
395.786 628.413 li
395.966 628.713 li
395.966 628.653 li
396.146 628.953 li
396.086 628.953 li
396.326 629.253 li
397.642 631.091 399.151 633.013 400.586 634.773 cv
401.126 635.493 li
401.126 635.433 li
401.727 636.213 li
403.697 638.744 405.88 641.155 407.906 643.653 cv
408.507 644.373 li
408.507 644.313 li
409.106 645.093 li
415.382 652.482 421.654 659.87 427.886 667.293 cv
429.086 668.793 li
429.086 668.733 li
430.346 670.173 li
430.286 670.173 li
431.546 671.613 li
431.546 671.553 li
433.946 674.313 li
440.771 681.83 445.9 687.509 448.586 697.593 cv
448.946 699.093 li
449.306 700.533 li
450.749 708.094 452.447 716.105 451.886 723.813 cv
451.826 725.613 li
451.706 727.413 li
.765255 .551598 0 0 cmyk
f
449.727 513.933 mo
449.846 515.733 li
449.966 517.533 li
449.906 517.533 li
449.966 519.333 li
450.026 521.253 li
450.026 521.193 li
449.966 522.213 li
449.966 522.153 li
449.966 523.173 li
449.906 524.193 li
449.906 524.133 li
449.846 525.213 li
449.235 530.264 448.384 535.287 447.386 540.273 cv
447.026 541.713 li
447.026 541.653 li
446.666 543.093 li
446.246 544.533 li
446.246 544.473 li
445.766 545.913 li
445.826 545.913 li
445.286 547.353 li
445.286 547.293 li
444.746 548.733 li
444.746 548.673 li
444.146 550.113 li
444.146 550.053 li
443.426 551.433 li
443.486 551.373 li
442.706 552.753 li
442.706 552.693 li
441.926 554.013 li
441.026 555.333 li
441.086 555.273 li
440.126 556.593 li
440.126 556.533 li
439.166 557.853 li
438.146 559.113 li
427.272 571.363 416.994 583.87 406.346 596.313 cv
405.806 596.973 li
405.206 597.693 li
401.296 602.856 396.309 607.463 393.386 613.293 cv
393.326 613.413 li
393.266 613.593 li
393.266 613.533 li
392.846 614.313 li
392.01 615.718 390.292 619.077 390.626 620.853 cv
390.686 621.153 li
392.606 620.733 li
392.546 620.493 li
392.606 620.553 li
392.546 620.253 li
392.546 620.373 li
392.546 620.193 li
392.546 620.253 li
392.546 620.073 li
392.546 620.133 li
392.606 619.953 li
392.606 620.013 li
392.606 619.773 li
392.606 619.833 li
392.666 619.533 li
392.666 619.593 li
392.786 619.233 li
392.786 619.293 li
392.906 618.933 li
392.846 618.933 li
392.966 618.573 li
392.966 618.633 li
393.266 617.853 li
393.266 617.913 li
393.566 617.193 li
393.566 617.253 li
393.866 616.533 li
393.866 616.593 li
394.166 615.933 li
394.678 615.208 394.991 614.524 395.366 613.773 cv
395.426 613.473 li
395.426 613.533 li
395.546 613.233 li
395.606 613.053 li
395.606 613.113 li
395.727 612.933 li
395.666 612.933 li
395.786 612.753 li
395.966 612.513 li
396.146 612.213 li
396.086 612.273 li
396.326 611.973 li
396.566 611.553 li
396.566 611.613 li
396.866 611.193 li
397.586 610.233 li
397.586 610.293 li
398.306 609.333 li
408.156 596.792 418.961 584.773 429.086 572.433 cv
430.346 570.993 li
430.286 571.053 li
431.546 569.613 li
432.746 568.233 li
439.982 560.209 445.715 554.419 448.586 543.633 cv
448.946 542.133 li
449.306 540.693 li
450.777 533.028 452.411 525.24 451.886 517.413 cv
451.826 515.613 li
451.706 513.813 li
f
1 /0 /CSD get_res sepcs
1 sep
SSJTFL+TimesNewRomanPSMT [0 -15.78 -15.78 0 0 0 ]msf327.687 700.714 mo(\0006\000S\000H\000F\000W\000U\000D\000O\000\003\000U\000H\000V\000S\000R\000Q\000V\000H)[-8.78162 -7.89795 -7.01428 -7.01428 -4.39478 -5.26257 -7.01428 -4.39478 -3.95294 -5.26257 -7.01428 -6.14648 -7.89795 -7.89789 -7.89795 -6.14648 0 ]ysh467.846 454.293 mo(\000:\000D\000Y\000H\000O\000H\000Q\000J\000W\000K)[-13.6228 -7.02219 -7.90591 -7.02222 -4.40271 -7.02222 -7.90591 -7.90588 -4.40271 0 ]ysh361.527 662.313 mo(\000%\000\003\000F\000K\000D\000Q\000Q\000H\000O)[-10.5413 -3.96094 -7.02216 -7.90594 -7.02222 -7.90588 -7.90588 -7.02222 0 ]ysh360.447 575.733 mo(\000*\000F\000K\000D\000Q\000Q\000H\000O)[-15.3572 -7.02222 -7.91357 -7.02997 -7.91357 -7.91357 -7.02991 0 ]ysh361.527 497.973 mo(\0005\000F\000K\000D\000Q\000Q\000H\000O)[-14.461 -7.02222 -7.91357 -7.02994 -7.91357 -7.9136 -7.02994 0 ]ysh329.247 733.473 mo(\000\013\000G\000\014)[-5.28302 -7.91846 0 ]ysh453.507 330.153 mo
453.087 330.153 li
453.087 14.9135 li
453.507 14.9135 li
cp
453.086 330.153 mo
cp
448.947 15.7534 mo
453.327 6.99341 li
457.707 15.7534 li
.75021 .679683 .670222 .90164 cmyk
f
450.747 266.433 mo
450.927 264.753 li
451.047 263.073 li
451.107 261.333 li
451.107 261.393 li
451.107 259.593 li
451.107 259.653 li
451.107 258.693 li
451.107 258.753 li
451.047 257.793 li
450.987 256.833 li
450.987 256.893 li
450.867 255.873 li
450.867 255.933 li
450.747 254.913 li
450.566 253.893 li
450.566 253.953 li
450.386 252.873 li
449.924 250.913 449.427 248.964 449.007 246.993 cv
448.647 245.733 li
448.707 245.733 li
447.987 243.093 li
447.987 243.153 li
447.566 241.773 li
447.566 241.833 li
447.087 240.453 li
447.087 240.513 li
446.607 239.133 li
446.066 237.813 li
445.406 236.493 li
445.466 236.493 li
444.747 235.173 li
443.966 233.853 li
444.027 233.913 li
443.186 232.593 li
443.186 232.653 li
442.707 231.993 li
442.767 231.993 li
442.286 231.333 li
442.286 231.393 li
441.807 230.733 li
441.267 230.133 li
440.186 228.873 li
440.186 228.933 li
438.987 227.673 li
439.047 227.733 li
437.786 226.473 li
437.786 226.533 li
436.466 225.273 li
436.466 225.333 li
435.087 224.073 li
435.087 224.133 li
433.647 222.873 li
433.647 222.933 li
432.147 221.673 li
430.587 220.473 li
416.984 209.964 403.781 198.659 390.387 187.833 cv
388.947 186.633 li
388.286 186.093 li
385.713 183.894 383.089 181.727 380.547 179.493 cv
379.947 178.953 li
379.346 178.473 li
377.954 177.048 375.875 175.496 374.786 173.913 cv
374.547 173.553 li
374.427 173.313 li
374.307 173.073 li
374.307 173.133 li
374.187 172.953 li
374.247 173.013 li
374.126 172.833 li
373.13 171.779 369.79 167.483 370.527 165.753 cv
370.587 165.453 li
372.507 166.053 li
372.387 166.293 li
372.447 166.113 li
372.387 166.413 li
372.387 166.233 li
372.387 166.413 li
372.387 166.353 li
372.447 166.533 li
372.387 166.353 li
372.447 166.593 li
372.447 166.533 li
372.507 166.773 li
372.447 166.653 li
372.566 166.953 li
372.566 166.893 li
372.687 167.193 li
372.807 167.493 li
372.987 167.793 li
373.346 168.453 li
373.286 168.453 li
373.707 169.113 li
373.707 169.053 li
374.126 169.713 li
374.126 169.653 li
374.607 170.313 li
374.547 170.253 li
375.087 170.913 li
375.608 171.639 375.96 171.8 376.286 172.593 cv
376.467 172.833 li
376.407 172.773 li
376.647 173.133 li
376.587 173.073 li
376.767 173.313 li
376.767 173.253 li
376.947 173.493 li
377.846 174.393 li
377.846 174.333 li
378.267 174.753 li
378.207 174.753 li
379.167 175.593 li
382.911 179.053 386.982 182.435 390.927 185.673 cv
391.647 186.273 li
391.587 186.273 li
392.367 186.933 li
393.147 187.533 li
393.987 188.253 li
401.59 194.417 409.138 200.67 416.727 206.853 cv
417.686 207.633 li
418.587 208.413 li
424.811 213.792 431.577 218.477 437.786 223.833 cv
439.107 225.033 li
440.427 226.293 li
441.626 227.553 li
442.767 228.873 li
446.651 233.278 448.664 238.353 450.266 243.933 cv
450.566 245.253 li
450.927 246.513 li
452.128 251.639 453.336 256.058 453.086 261.393 cv
452.966 263.193 li
452.846 264.933 li
452.727 266.613 li
.467353 0 .87747 0 cmyk
f
450.747 65.6744 mo
450.927 67.3545 li
451.047 69.0345 li
451.107 70.7745 li
451.107 70.7145 li
451.107 73.4145 li
451.047 74.3145 li
450.987 75.2745 li
450.987 75.2145 li
450.867 76.2345 li
450.867 76.1744 li
450.747 77.1945 li
450.357 79.8755 449.54 82.4625 449.007 85.1144 cv
448.647 86.4344 li
448.707 86.3745 li
447.987 89.0145 li
447.566 90.3345 li
446.607 92.9745 li
446.066 94.3545 li
446.066 94.2945 li
445.406 95.6744 li
445.466 95.6144 li
444.747 96.9344 li
443.966 98.2545 li
444.027 98.1945 li
443.186 99.5145 li
442.707 100.174 li
442.767 100.114 li
442.286 100.774 li
441.807 101.374 li
441.267 101.974 li
440.186 103.234 li
440.186 103.174 li
438.987 104.434 li
439.047 104.374 li
437.786 105.634 li
437.786 105.574 li
436.466 106.834 li
435.087 108.034 li
427.859 113.87 420.638 119.241 413.547 125.314 cv
411.566 126.934 li
409.527 128.614 li
402.685 134.257 395.759 139.796 388.947 145.474 cv
388.286 146.014 li
387.686 146.554 li
387.686 146.494 li
387.087 147.034 li
382.911 150.935 377.796 154.138 374.427 158.794 cv
374.307 159.034 li
374.307 158.974 li
374.187 159.154 li
374.247 159.094 li
374.126 159.274 li
373.105 160.357 369.799 164.58 370.527 166.354 cv
370.587 166.654 li
372.507 166.114 li
372.387 165.814 li
372.447 165.934 li
372.387 165.694 li
372.387 165.874 li
372.387 165.694 li
372.387 165.754 li
372.447 165.574 li
372.387 165.694 li
372.447 165.514 li
372.447 165.574 li
372.507 165.334 li
372.447 165.394 li
372.566 165.154 li
372.566 165.214 li
372.807 164.614 li
372.987 164.314 li
373.346 163.594 li
373.286 163.654 li
373.707 162.994 li
373.707 163.054 li
374.126 162.394 li
374.126 162.454 li
374.607 161.794 li
374.547 161.854 li
375.087 161.194 li
375.608 160.468 375.96 160.307 376.286 159.514 cv
376.467 159.274 li
376.407 159.334 li
376.647 158.974 li
376.587 159.034 li
376.767 158.794 li
376.767 158.854 li
376.947 158.614 li
377.846 157.714 li
378.267 157.354 li
378.207 157.354 li
379.167 156.514 li
382.911 153.054 386.982 149.672 390.927 146.434 cv
391.647 145.834 li
391.587 145.834 li
392.367 145.174 li
401.392 137.806 410.503 130.451 419.427 122.974 cv
420.327 122.254 li
420.267 122.254 li
421.947 120.874 li
423.626 119.554 li
431.775 112.835 442.599 106.339 447.207 96.5145 cv
447.867 95.0745 li
448.406 93.6945 li
450.88 86.8434 453.828 76.2394 452.966 68.9145 cv
452.846 67.2345 li
452.727 65.4944 li
f
452.127 206.854 mo
452.187 205.234 li
452.247 203.614 li
452.247 203.674 li
452.307 201.994 li
452.307 202.054 li
452.307 200.314 li
452.307 200.374 li
452.247 198.634 li
452.247 197.734 li
452.187 196.834 li
452.066 195.874 li
452.006 194.914 li
451.886 193.894 li
451.886 193.954 li
451.526 191.794 li
451.346 190.714 li
451.227 189.514 li
451.047 188.314 li
451.047 188.374 li
450.807 187.114 li
450.807 187.174 li
450.627 185.914 li
450.146 183.394 li
449.547 180.874 li
449.187 179.614 li
449.247 179.614 li
448.407 177.094 li
448.467 177.154 li
447.987 175.894 li
447.447 174.634 li
447.507 174.694 li
446.307 172.294 li
446.307 172.354 li
445.647 171.154 li
445.647 171.214 li
444.927 170.014 li
444.147 168.874 li
444.207 168.934 li
443.367 167.734 li
443.367 167.794 li
442.527 166.654 li
441.627 165.514 li
441.687 165.514 li
440.727 164.374 li
439.827 163.234 li
431.431 153.125 423.488 142.568 415.286 132.274 cv
414.447 131.194 li
413.667 130.174 li
412.066 128.147 410.515 126.019 408.987 123.934 cv
408.267 122.974 li
407.445 121.764 406.535 120.618 405.867 119.314 cv
405.807 119.134 li
405.687 118.834 li
405.566 118.534 li
405.627 118.594 li
405.507 118.294 li
405.566 118.414 li
405.387 118.114 li
404.632 116.622 402.891 113.373 403.227 111.574 cv
403.286 111.334 li
405.207 111.694 li
405.147 111.934 li
405.207 111.814 li
405.147 112.114 li
405.147 111.994 li
405.147 112.294 li
405.147 112.174 li
405.207 112.414 li
405.147 112.354 li
405.207 112.534 li
405.267 112.774 li
405.267 112.714 li
405.327 113.014 li
405.447 113.314 li
405.387 113.254 li
405.507 113.614 li
405.507 113.554 li
405.987 114.874 li
405.987 114.814 li
406.227 115.414 li
406.227 115.354 li
406.827 116.554 li
407.187 117.214 li
407.307 117.574 li
407.427 117.874 li
407.547 118.174 li
407.547 118.114 li
407.607 118.414 li
407.607 118.354 li
407.667 118.474 li
407.727 118.654 li
407.727 118.594 li
407.847 118.774 li
407.967 119.014 li
407.907 118.954 li
408.087 119.254 li
408.087 119.194 li
408.447 119.794 li
408.747 120.214 li
408.747 120.154 li
409.286 120.994 li
409.887 121.834 li
410.187 122.314 li
410.187 122.254 li
410.547 122.734 li
411.586 124.294 412.815 125.714 413.907 127.234 cv
414.566 128.074 li
414.507 128.074 li
415.227 128.974 li
421.19 136.702 427.346 144.259 433.286 152.014 cv
434.367 153.394 li
434.307 153.394 li
435.327 154.654 li
436.346 155.974 li
436.346 155.914 li
438.387 158.434 li
438.387 158.374 li
440.367 160.774 li
441.327 161.974 li
446.699 168.348 449.995 173.442 451.766 181.714 cv
452.066 182.974 li
452.307 184.294 li
453.458 190.76 454.622 197.137 454.227 203.734 cv
454.167 205.354 li
454.107 206.974 li
0 .993988 1 0 cmyk
f
452.127 16.8334 mo
452.187 18.3935 li
452.339 21.2574 452.346 23.9925 452.187 26.8535 cv
452.066 27.8135 li
452.066 27.7535 li
452.006 28.7734 li
452.006 28.7134 li
451.886 29.7335 li
451.396 32.0234 451.3 34.2755 450.807 36.5135 cv
450.627 37.7734 li
450.627 37.7134 li
450.146 40.2335 li
449.846 41.4935 li
449.547 42.8135 li
449.547 42.7535 li
449.187 44.0735 li
449.247 44.0135 li
448.827 45.3334 li
448.827 45.2734 li
448.407 46.5334 li
448.467 46.5334 li
447.987 47.7935 li
447.987 47.7335 li
447.447 48.9935 li
447.507 48.9335 li
446.907 50.1935 li
446.907 50.1335 li
446.307 51.3334 li
445.647 52.4734 li
444.927 53.6135 li
444.147 54.7535 li
444.207 54.7535 li
442.527 57.0334 li
441.627 58.1735 li
441.687 58.1135 li
440.727 59.3135 li
439.827 60.4535 li
431.407 70.4905 423.492 81.1035 415.286 91.3535 cv
414.447 92.4335 li
413.667 93.4535 li
412.036 95.4764 410.551 97.6255 408.987 99.6935 cv
408.267 100.653 li
407.441 101.862 406.562 103.03 405.867 104.313 cv
405.807 104.553 li
405.687 104.853 li
405.566 105.093 li
405.627 105.033 li
405.507 105.333 li
405.566 105.273 li
405.387 105.573 li
405.387 105.513 li
405.087 106.173 li
404.454 107.121 402.847 110.772 403.227 112.053 cv
403.286 112.353 li
405.207 111.933 li
405.147 111.693 li
405.207 111.813 li
405.147 111.513 li
405.147 111.633 li
405.147 111.333 li
405.147 111.453 li
405.207 111.273 li
405.147 111.273 li
405.207 111.093 li
405.207 111.153 li
405.267 110.853 li
405.267 110.913 li
405.327 110.613 li
405.327 110.673 li
405.447 110.373 li
405.387 110.373 li
405.507 110.073 li
405.747 109.413 li
406.227 108.213 li
406.227 108.273 li
406.527 107.673 li
407.188 106.624 407.344 105.734 407.847 104.853 cv
407.967 104.613 li
407.907 104.673 li
408.087 104.433 li
409.859 101.711 411.891 99.0054 413.907 96.4535 cv
414.566 95.5535 li
414.507 95.5535 li
415.227 94.6534 li
421.18 86.9474 427.346 79.3954 433.286 71.6735 cv
434.367 70.2935 li
434.307 70.2935 li
435.327 68.9734 li
436.346 67.7134 li
442.428 60.1305 448.588 54.2695 451.107 44.5535 cv
451.466 43.2935 li
451.766 41.9734 li
453.182 34.9145 454.644 27.1575 454.227 19.9535 cv
454.167 18.3334 li
454.107 16.7134 li
f
450.867 350.253 mo
450.987 348.453 li
451.047 346.593 li
451.047 346.653 li
451.107 344.793 li
451.107 341.973 li
451.047 340.953 li
451.047 341.013 li
450.987 339.993 li
450.927 338.913 li
450.927 338.973 li
450.867 337.893 li
450.686 336.813 li
450.566 335.673 li
450.566 335.733 li
450.206 333.333 li
449.966 332.073 li
449.786 330.753 li
449.547 329.433 li
449.306 328.053 li
449.306 328.113 li
449.066 326.673 li
449.066 326.733 li
448.767 325.293 li
448.466 323.913 li
448.167 322.473 li
447.746 321.033 li
447.806 321.093 li
447.387 319.593 li
447.387 319.653 li
446.427 316.773 li
446.427 316.833 li
445.827 315.393 li
445.887 315.453 li
444.566 312.693 li
444.566 312.753 li
443.846 311.433 li
443.007 310.113 li
443.066 310.173 li
441.267 307.533 li
441.267 307.593 li
440.306 306.273 li
440.306 306.333 li
439.286 305.013 li
438.207 303.753 li
427.84 292.25 418.181 280.288 408.087 268.533 cv
407.487 267.813 li
406.887 267.153 li
406.346 266.493 li
404.147 263.747 401.763 261.058 399.626 258.273 cv
398.667 257.073 li
397.35 255.359 396.031 253.775 394.947 251.913 cv
394.887 251.673 li
394.707 251.373 li
394.587 251.073 li
394.647 251.073 li
394.466 250.714 li
394.346 250.533 li
394.406 250.593 li
393.987 249.813 li
393.22 248.735 391.342 244.779 391.767 243.273 cv
391.827 242.973 li
393.746 243.393 li
393.686 243.633 li
393.686 243.573 li
393.686 243.873 li
393.686 243.753 li
393.686 243.933 li
393.686 243.873 li
393.686 244.053 li
393.686 243.993 li
393.686 244.173 li
393.686 244.113 li
393.746 244.353 li
393.746 244.293 li
393.806 244.593 li
393.806 244.533 li
393.867 244.893 li
393.867 244.833 li
393.987 245.193 li
394.107 245.553 li
394.107 245.493 li
394.406 246.273 li
394.346 246.214 li
394.647 246.933 li
394.647 246.873 li
394.947 247.593 li
394.947 247.533 li
395.306 248.193 li
395.63 248.859 396.181 249.665 396.447 250.353 cv
396.566 250.654 li
396.566 250.593 li
396.686 250.893 li
396.746 251.073 li
396.686 251.013 li
396.927 251.373 li
397.047 251.613 li
397.227 251.853 li
397.466 252.214 li
397.406 252.154 li
397.707 252.513 li
398.007 252.933 li
398.667 253.893 li
398.667 253.833 li
399.387 254.793 li
400.141 255.76 400.88 256.732 401.667 257.673 cv
402.267 258.393 li
402.207 258.393 li
402.867 259.113 li
411.158 269.368 419.934 279.319 428.367 289.473 cv
428.966 290.253 li
428.966 290.193 li
430.227 291.693 li
431.427 293.133 li
432.686 294.513 li
432.626 294.513 li
433.887 295.893 li
435.086 297.213 li
441.776 304.71 447.117 310.511 449.667 320.553 cv
450.086 321.993 li
450.386 323.433 li
451.879 331.01 453.504 338.964 453.026 346.713 cv
452.906 348.513 li
452.846 350.313 li
.765255 .551598 0 0 cmyk
f
450.867 136.833 mo
450.987 138.633 li
451.047 140.433 li
451.107 142.293 li
451.107 142.233 li
451.107 145.113 li
451.047 146.073 li
450.987 147.093 li
450.927 148.113 li
450.867 149.193 li
450.867 149.133 li
450.686 150.273 li
450.509 152.302 450.058 154.274 449.786 156.273 cv
449.547 157.653 li
449.547 157.593 li
449.066 160.353 li
448.767 161.793 li
448.767 161.733 li
448.466 163.173 li
448.167 164.613 li
447.746 166.053 li
447.806 165.993 li
447.387 167.433 li
446.906 168.873 li
446.906 168.813 li
446.427 170.253 li
445.827 171.633 li
445.887 171.633 li
445.227 173.013 li
445.227 172.953 li
444.566 174.333 li
443.846 175.653 li
443.846 175.593 li
443.007 176.973 li
443.066 176.913 li
442.167 178.233 li
441.267 179.493 li
440.306 180.753 li
439.286 182.073 li
439.286 182.013 li
438.207 183.333 li
437.126 184.593 li
426.947 195.808 417.402 207.733 407.487 219.213 cv
406.887 219.933 li
405.806 221.253 li
403.57 223.962 401.267 226.611 399.147 229.413 cv
398.667 229.953 li
398.246 230.493 li
397.086 232.009 395.862 233.505 394.947 235.173 cv
394.887 235.353 li
394.587 235.953 li
394.647 235.953 li
394.526 236.253 li
394.526 236.193 li
394.466 236.373 li
394.466 236.313 li
394.346 236.493 li
394.406 236.493 li
393.987 237.213 li
393.247 238.317 391.335 242.249 391.767 243.753 cv
391.827 244.053 li
393.746 243.693 li
393.686 243.393 li
393.686 243.513 li
393.686 243.213 li
393.686 243.333 li
393.686 243.153 li
393.686 243.213 li
393.686 243.033 li
393.686 243.093 li
393.686 242.853 li
393.686 242.973 li
393.746 242.673 li
393.746 242.733 li
393.806 242.433 li
393.806 242.493 li
393.867 242.193 li
393.987 241.833 li
393.987 241.893 li
394.107 241.533 li
394.406 240.813 li
394.346 240.813 li
394.647 240.093 li
394.647 240.153 li
394.947 239.493 li
395.306 238.833 li
395.306 238.893 li
395.667 238.173 li
396.026 237.615 396.319 237.042 396.566 236.433 cv
396.686 236.133 li
396.686 236.193 li
396.746 236.013 li
396.806 235.833 li
396.806 235.893 li
396.927 235.653 li
396.927 235.713 li
397.047 235.473 li
397.227 235.173 li
397.466 234.873 li
397.406 234.873 li
397.707 234.513 li
398.944 232.781 400.341 231.031 401.667 229.353 cv
402.267 228.693 li
402.207 228.693 li
402.867 227.913 li
403.526 227.073 li
404.246 226.173 li
404.246 226.233 li
405.026 225.273 li
406.266 223.729 407.681 222.036 408.987 220.533 cv
409.587 219.753 li
409.587 219.813 li
410.246 219.033 li
410.846 218.253 li
411.566 217.473 li
417.19 210.872 422.757 204.225 428.367 197.613 cv
428.966 196.833 li
430.227 195.393 li
434.341 190.42 438.945 185.86 442.827 180.693 cv
443.786 179.313 li
444.686 177.993 li
445.526 176.613 li
446.306 175.233 li
449.004 170.315 450.204 164.784 451.286 159.333 cv
451.466 157.953 li
451.706 156.633 li
452.55 151.739 453.235 147.222 453.086 142.233 cv
453.026 140.373 li
452.906 138.513 li
452.846 136.713 li
f
290.247 210.934 mo
290.367 209.434 li
290.427 208.654 li
290.427 208.714 li
290.427 207.934 li
290.427 207.995 li
290.367 207.154 li
290.367 207.214 li
290.307 206.314 li
290.307 206.374 li
290.186 205.474 li
290.186 205.534 li
289.947 204.574 li
289.707 203.555 li
289.466 202.474 li
289.167 201.334 li
288.807 200.194 li
288.867 200.194 li
288.626 199.594 li
288.626 199.654 li
288.447 198.995 li
288.447 199.055 li
288.207 198.454 li
288.207 198.514 li
287.906 197.854 li
287.906 197.914 li
287.607 197.314 li
287.667 197.374 li
287.307 196.774 li
287.307 196.834 li
286.947 196.234 li
286.947 196.294 li
286.527 195.694 li
286.587 195.754 li
286.107 195.154 li
286.167 195.214 li
285.626 194.674 li
285.686 194.674 li
285.147 194.134 li
285.207 194.134 li
284.607 193.594 li
284.607 193.654 li
284.007 193.115 li
284.066 193.115 li
283.406 192.574 li
282.807 192.034 li
282.087 191.495 li
282.147 191.495 li
279.267 189.334 li
273.759 184.913 268.327 180.391 262.827 175.954 cv
262.227 175.474 li
261.747 175.055 li
260.15 173.671 257.616 171.758 256.346 170.134 cv
256.286 170.014 li
256.167 169.834 li
256.227 169.894 li
256.167 169.774 li
256.167 169.834 li
256.047 169.714 li
256.107 169.714 li
255.867 169.414 li
255.117 168.505 254.189 167.361 254.367 166.115 cv
254.427 165.934 li
256.346 166.534 li
256.286 166.654 li
256.286 166.534 li
256.286 166.654 li
256.286 166.414 li
256.286 166.534 li
256.286 166.354 li
256.346 166.534 li
256.286 166.414 li
256.406 166.654 li
256.346 166.594 li
256.527 166.894 li
256.467 166.894 li
256.647 167.194 li
256.647 167.134 li
256.827 167.434 li
256.767 167.374 li
257.186 167.914 li
257.126 167.914 li
257.367 168.214 li
257.367 168.154 li
257.667 168.514 li
257.906 168.874 li
258.027 169.115 li
257.967 169.055 li
258.087 169.174 li
258.027 169.115 li
258.327 169.414 li
258.267 169.414 li
258.447 169.534 li
258.387 169.534 li
258.566 169.654 li
259.357 170.398 260.143 171.109 260.966 171.814 cv
261.327 172.115 li
261.267 172.115 li
261.686 172.414 li
266.884 176.798 272.241 181.073 277.527 185.374 cv
279.027 186.634 li
278.966 186.574 li
280.466 187.774 li
281.906 188.854 li
284.669 191.063 287.708 193.173 289.346 196.414 cv
289.707 197.014 li
290.007 197.674 li
291.1 200.44 292.652 205.846 292.346 208.774 cv
292.346 209.555 li
292.227 211.055 li
.467353 0 .87747 0 cmyk
f
290.247 121.833 mo
290.367 123.333 li
290.367 123.273 li
290.427 124.053 li
290.427 124.833 li
290.427 124.773 li
290.367 125.613 li
290.367 125.553 li
290.307 126.453 li
290.307 126.393 li
290.186 127.293 li
290.186 127.233 li
289.947 128.193 li
289.707 129.213 li
289.466 130.293 li
289.167 131.433 li
289.167 131.373 li
288.807 132.573 li
288.867 132.573 li
288.626 133.173 li
288.626 133.113 li
288.447 133.713 li
288.207 134.313 li
288.207 134.253 li
287.607 135.453 li
287.667 135.393 li
287.307 135.993 li
287.307 135.933 li
286.947 136.533 li
286.947 136.473 li
286.527 137.073 li
286.587 137.013 li
286.107 137.553 li
286.167 137.553 li
285.626 138.093 li
285.686 138.093 li
285.147 138.633 li
285.207 138.573 li
284.007 139.653 li
284.066 139.653 li
283.406 140.193 li
283.406 140.133 li
282.807 140.673 li
282.147 141.213 li
275.81 146.031 269.689 151.326 263.427 156.273 cv
262.827 156.813 li
262.227 157.293 li
260.415 158.897 257.879 160.751 256.346 162.573 cv
256.286 162.753 li
256.167 162.873 li
256.227 162.813 li
256.167 162.933 li
256.047 163.053 li
256.107 162.993 li
255.867 163.293 li
255.296 163.932 254.057 165.709 254.367 166.653 cv
254.427 166.773 li
256.346 166.233 li
256.286 166.113 li
256.286 166.233 li
256.286 166.113 li
256.286 166.353 li
256.286 166.173 li
256.286 166.353 li
256.346 166.173 li
256.286 166.293 li
256.406 166.053 li
256.346 166.113 li
256.527 165.813 li
256.467 165.873 li
256.827 165.273 li
256.767 165.393 li
257.186 164.793 li
257.126 164.853 li
257.367 164.553 li
257.667 164.253 li
257.786 164.013 li
257.906 163.833 li
257.967 163.713 li
257.967 163.773 li
258.027 163.653 li
257.967 163.713 li
258.087 163.533 li
258.027 163.593 li
258.207 163.413 li
258.207 163.473 li
258.327 163.353 li
258.267 163.353 li
258.566 163.053 li
258.566 163.113 li
259.167 162.513 li
259.587 162.153 li
260.066 161.673 li
260.066 161.733 li
260.367 161.493 li
260.667 161.193 li
260.607 161.193 li
260.966 160.953 li
261.327 160.653 li
261.267 160.653 li
261.686 160.353 li
266.848 155.916 272.294 151.697 277.527 147.333 cv
279.027 146.133 li
278.966 146.133 li
280.466 144.993 li
281.906 143.853 li
284.725 141.754 287.651 139.511 289.346 136.353 cv
289.707 135.693 li
290.007 135.093 li
291.089 132.361 292.655 126.883 292.346 123.993 cv
292.346 123.213 li
292.227 121.653 li
f
288.327 588.453 mo
288.507 587.733 li
288.626 587.013 li
288.626 587.073 li
288.746 586.293 li
288.746 586.353 li
288.746 585.933 li
288.746 585.993 li
288.746 585.633 li
288.746 585.693 li
288.746 585.273 li
288.746 585.333 li
288.686 584.913 li
288.686 584.973 li
288.566 584.553 li
288.626 584.613 li
288.507 584.193 li
288.507 584.253 li
288.327 583.773 li
288.387 583.833 li
288.146 583.413 li
288.206 583.413 li
287.966 582.993 li
287.966 583.053 li
287.667 582.513 li
287.667 582.573 li
287.066 581.493 li
286.346 580.413 li
286.406 580.413 li
285.986 579.873 li
286.046 579.873 li
285.626 579.333 li
285.206 578.733 li
285.206 578.793 li
284.727 578.193 li
284.186 577.593 li
284.246 577.653 li
283.646 577.053 li
283.706 577.053 li
282.986 576.453 li
283.046 576.513 li
282.327 575.913 li
281.546 575.313 li
281.546 575.373 li
280.706 574.773 li
280.227 574.473 li
280.227 574.533 li
279.686 574.233 li
279.746 574.233 li
279.206 573.933 li
278.667 573.693 li
278.066 573.393 li
278.126 573.393 li
277.466 573.093 li
277.526 573.153 li
276.206 572.553 li
275.546 572.313 li
274.827 572.013 li
273.327 571.473 li
273.387 571.533 li
271.766 570.993 li
271.827 570.993 li
268.466 569.913 li
251.443 564.918 234.551 559.486 217.586 554.313 cv
216.746 554.013 li
215.966 553.773 li
210.56 552.006 204.31 550.325 199.167 548.073 cv
199.047 548.013 li
198.866 547.833 li
198.926 547.893 li
198.746 547.773 li
198.626 547.713 li
198.686 547.773 li
198.566 547.653 li
197.906 547.353 li
196.921 546.928 195.938 546.455 195.086 545.793 cv
194.906 545.613 li
194.667 545.493 li
194.306 545.133 li
194.126 544.893 li
194.007 544.653 li
193.887 544.293 li
193.947 543.873 li
194.126 543.453 li
194.306 543.273 li
195.806 544.533 li
195.686 544.653 li
195.866 544.413 li
195.806 544.533 li
195.866 544.173 li
195.866 544.233 li
195.866 543.933 li
195.866 543.993 li
195.806 543.813 li
195.866 543.933 li
195.746 543.753 li
195.806 543.873 li
195.746 543.753 li
195.866 543.873 li
195.806 543.873 li
195.987 543.993 li
195.926 543.933 li
196.107 544.113 li
196.107 544.053 li
196.286 544.233 li
196.227 544.173 li
196.706 544.533 li
196.646 544.473 li
197.126 544.773 li
197.066 544.773 li
197.607 545.013 li
197.547 545.013 li
198.146 545.313 li
198.773 545.515 199.405 545.911 200.007 546.213 cv
200.186 546.333 li
200.126 546.333 li
200.246 546.393 li
200.186 546.393 li
200.426 546.513 li
200.366 546.453 li
200.547 546.573 li
200.487 546.573 li
200.727 546.633 li
200.667 546.633 li
200.906 546.753 li
201.206 546.873 li
201.206 546.813 li
201.566 546.993 li
201.507 546.993 li
201.926 547.113 li
203.579 547.663 205.039 548.246 206.727 548.733 cv
207.507 549.033 li
207.447 549.033 li
208.346 549.273 li
209.702 549.708 211.068 550.173 212.426 550.593 cv
213.026 550.833 li
213.026 550.773 li
213.686 551.013 li
214.346 551.193 li
233.111 557.07 251.892 562.946 270.746 568.533 cv
272.426 569.073 li
273.986 569.613 li
275.546 570.213 li
279.346 571.58 282.831 573.34 285.686 576.273 cv
286.227 576.933 li
286.766 577.533 li
288.577 580.222 290.964 583.018 290.727 586.473 cv
290.607 587.313 li
290.426 588.093 li
290.306 588.873 li
f
288.327 499.653 mo
288.507 500.373 li
288.626 501.093 li
288.626 501.033 li
288.746 501.813 li
288.746 501.753 li
288.746 502.173 li
288.746 502.113 li
288.746 502.473 li
288.746 502.413 li
288.746 502.833 li
288.746 502.773 li
288.686 503.193 li
288.686 503.133 li
288.566 503.553 li
288.626 503.493 li
288.507 503.913 li
288.507 503.853 li
288.327 504.333 li
288.387 504.213 li
288.146 504.693 li
288.206 504.633 li
287.966 505.113 li
287.966 505.053 li
287.667 505.533 li
287.066 506.553 li
286.706 507.153 li
286.706 507.093 li
286.346 507.693 li
286.406 507.633 li
285.986 508.233 li
286.046 508.233 li
285.626 508.773 li
285.206 509.373 li
285.206 509.313 li
284.727 509.913 li
284.727 509.853 li
284.186 510.453 li
284.246 510.453 li
283.646 511.053 li
283.706 510.993 li
282.986 511.653 li
283.046 511.593 li
282.327 512.193 li
282.327 512.133 li
281.546 512.733 li
280.706 513.333 li
280.706 513.273 li
280.227 513.573 li
279.686 513.873 li
279.746 513.873 li
279.206 514.173 li
279.206 514.113 li
278.667 514.413 li
278.066 514.713 li
278.126 514.713 li
277.466 514.953 li
277.526 514.953 li
276.866 515.253 li
276.206 515.493 li
275.546 515.793 li
274.827 516.033 li
273.327 516.573 li
273.387 516.573 li
271.766 517.113 li
271.827 517.113 li
270.146 517.653 li
251.064 523.315 232.107 529.313 213.086 535.173 cv
212.426 535.413 li
212.487 535.413 li
211.827 535.593 li
211.227 535.773 li
208.839 536.547 206.469 537.32 204.086 538.113 cv
203.487 538.353 li
202.887 538.533 li
201.806 538.953 li
201.267 539.133 li
200.846 539.253 li
200.487 539.433 li
199.887 539.673 li
199.646 539.733 li
199.466 539.853 li
199.286 539.913 li
199.167 540.033 li
199.047 540.093 li
198.866 540.213 li
198.926 540.213 li
198.746 540.333 li
198.746 540.273 li
198.626 540.333 li
198.686 540.333 li
198.566 540.393 li
197.906 540.693 li
196.919 541.126 195.98 541.653 195.086 542.253 cv
194.906 542.433 li
194.667 542.613 li
194.126 543.153 li
193.887 543.753 li
193.947 544.173 li
194.126 544.593 li
194.306 544.833 li
195.806 543.573 li
195.686 543.453 li
195.866 543.693 li
195.806 543.573 li
195.866 543.873 li
195.866 543.813 li
195.866 544.173 li
195.866 544.053 li
195.806 544.233 li
195.866 544.173 li
195.746 544.353 li
195.806 544.233 li
195.746 544.293 li
195.866 544.173 li
195.806 544.233 li
195.987 544.113 li
195.926 544.113 li
196.286 543.873 li
196.227 543.873 li
196.706 543.573 li
196.646 543.573 li
197.126 543.273 li
197.066 543.333 li
197.607 543.033 li
197.547 543.033 li
198.146 542.793 li
198.751 542.444 199.445 542.243 200.007 541.833 cv
200.186 541.713 li
200.126 541.773 li
200.246 541.713 li
200.186 541.713 li
200.426 541.593 li
200.366 541.593 li
200.547 541.533 li
200.487 541.533 li
200.727 541.473 li
200.667 541.473 li
200.906 541.353 li
201.206 541.233 li
201.566 541.113 li
201.987 540.933 li
201.926 540.933 li
202.466 540.813 li
203.845 540.253 205.313 539.832 206.727 539.313 cv
207.507 539.073 li
207.447 539.073 li
208.286 538.833 li
209.246 538.533 li
227.21 532.733 245.458 527.193 263.546 521.733 cv
265.406 521.133 li
267.266 520.593 li
269.066 520.053 li
274.328 518.284 280.021 516.823 284.306 513.093 cv
285.026 512.433 li
285.686 511.833 li
287.749 509.3 291.099 505.078 290.727 501.633 cv
290.607 500.793 li
290.426 499.953 li
290.306 499.173 li
f
62.0065 527.433 mo
62.0065 560.553 li
62.0185 579.907 77.6765 595.602 97.0465 595.593 cv
121.767 595.593 li
121.287 595.173 li
121.287 608.013 li
142.107 587.193 li
121.287 566.373 li
121.287 579.153 li
121.767 578.733 li
97.0465 578.733 li
94.8695 578.817 91.9325 578.242 89.9665 577.293 cv
89.1265 576.933 li
89.1865 576.933 li
88.3465 576.573 li
88.4065 576.573 li
86.8465 575.613 li
86.9065 575.673 li
85.4665 574.593 li
84.8065 573.993 li
84.8065 574.053 li
84.2065 573.393 li
84.2065 573.453 li
83.0065 572.133 li
82.4665 571.413 li
82.4665 571.473 li
81.9865 570.753 li
81.5065 569.973 li
81.5065 570.033 li
81.0265 569.253 li
81.0865 569.253 li
80.6665 568.413 li
80.6665 568.473 li
79.9465 566.793 li
79.9465 566.853 li
79.7065 565.953 li
79.7065 566.013 li
79.4065 565.113 li
79.4665 565.113 li
79.2265 564.213 li
79.2265 564.273 li
79.0465 563.313 li
79.0465 563.373 li
78.9265 562.413 li
78.9865 562.473 li
78.8665 561.513 li
78.8665 527.433 li
cp
78.4465 528.333 mo
77.9665 527.853 li
77.9665 560.553 li
78.0605 571.126 86.4175 579.59 97.0465 579.633 cv
122.187 579.633 li
122.187 567.393 li
121.407 567.693 li
141.207 587.493 li
141.207 586.833 li
121.407 606.633 li
122.187 606.933 li
122.187 594.693 li
95.2465 594.693 li
95.3065 594.693 li
93.5065 594.573 li
93.5665 594.573 li
91.8265 594.333 li
90.1465 594.033 li
88.4665 593.613 li
88.5265 593.673 li
86.8465 593.193 li
86.9065 593.193 li
85.2865 592.653 li
83.7265 592.053 li
80.7265 590.613 li
80.7865 590.613 li
79.3465 589.773 li
77.9065 588.873 li
77.9665 588.873 li
76.5865 587.913 li
75.3265 586.893 li
75.3265 586.953 li
74.0665 585.813 li
74.0665 585.873 li
72.8665 584.733 li
72.9265 584.733 li
71.7265 583.533 li
71.7865 583.533 li
70.7065 582.273 li
69.6865 581.013 li
68.7265 579.633 li
68.7265 579.693 li
67.8265 578.253 li
67.8265 578.313 li
66.9865 576.813 li
66.9865 576.873 li
65.5465 573.873 li
65.6065 573.873 li
64.9465 572.313 li
64.4065 570.693 li
64.4065 570.753 li
63.9865 569.073 li
63.9865 569.133 li
63.5665 567.453 li
63.2665 565.773 li
63.0865 564.033 li
63.0865 564.093 li
62.9065 562.293 li
62.9065 562.353 li
62.9065 527.853 li
62.4265 528.333 li
.75021 .679683 .670222 .90164 cmyk
f
61.3465 191.914 mo
61.3465 158.674 li
61.2065 139.434 77.0925 123.593 96.3265 123.634 cv
121.047 123.634 li
120.627 124.054 li
120.627 111.274 li
141.447 132.094 li
120.627 152.914 li
120.627 140.074 li
121.047 140.494 li
95.4265 140.494 li
94.4665 140.614 li
94.5265 140.614 li
93.5665 140.674 li
92.6665 140.854 li
91.7665 141.094 li
91.8265 141.034 li
90.9265 141.334 li
90.0865 141.574 li
89.2465 141.934 li
89.3065 141.934 li
88.4665 142.294 li
87.6865 142.714 li
87.6865 142.654 li
86.9065 143.134 li
85.4665 144.094 li
84.7465 144.634 li
84.8065 144.634 li
83.4865 145.834 li
82.8865 146.434 li
82.2865 147.094 li
82.3465 147.094 li
81.7465 147.814 li
81.8065 147.754 li
81.2665 148.534 li
81.2665 148.474 li
80.7865 149.254 li
80.3665 150.034 li
80.3665 149.974 li
79.9465 150.814 li
79.9465 150.754 li
79.5865 151.594 li
78.6335 153.982 78.2315 156.108 78.1465 158.674 cv
78.1465 191.914 li
cp
77.7265 191.014 mo
77.3065 191.494 li
77.3065 158.674 li
77.2445 148.139 85.8085 139.684 96.3265 139.594 cv
121.467 139.594 li
121.467 151.834 li
120.747 151.534 li
140.487 131.734 li
140.487 132.394 li
120.747 112.594 li
121.467 112.294 li
121.467 124.534 li
95.4265 124.534 li
95.4865 124.534 li
94.5865 124.534 li
91.1065 124.894 li
91.1665 124.894 li
89.4265 125.194 li
89.4865 125.194 li
87.8065 125.614 li
86.1865 126.034 li
84.5665 126.574 li
84.6265 126.574 li
83.0665 127.234 li
83.0665 127.174 li
81.5065 127.894 li
81.5665 127.894 li
80.0665 128.614 li
78.6265 129.454 li
77.2465 130.354 li
75.9265 131.314 li
74.6065 132.334 li
73.4065 133.414 li
73.4065 133.354 li
72.2065 134.554 li
72.2065 134.494 li
71.0665 135.694 li
69.9865 136.954 li
68.9665 138.274 li
68.9665 138.214 li
68.0065 139.594 li
67.1065 140.974 li
67.1665 140.974 li
66.3265 142.414 li
66.3265 142.354 li
65.5465 143.854 li
64.8865 145.414 li
64.8865 145.354 li
64.2865 146.914 li
63.7465 148.534 li
63.7465 148.474 li
63.2665 150.154 li
63.2665 150.094 li
62.9065 151.774 li
62.6065 153.454 li
62.3665 155.194 li
62.3665 155.134 li
62.2465 156.934 li
62.2465 156.874 li
62.1865 157.774 li
62.1865 191.494 li
61.7665 191.014 li
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FUUQMX+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/FUUQMX+TimesNewRomanPSMT 1 GetGlyphDirectory47 <001C60D8A8C9B7D8BE1910D0EBEC744B6638E6ED4C6FC0AF39F5B8B10BFA09270956A997B577BBD8E3EC179B174ED931484CCFFCF819D4978AE37145A7A3C221DF78A5AAD08DFCBE2638BCFCF6B4930FFFAD1163890B85697ECB905727AF12A0E5C1679B01834AD8D0C4111313E17E548887938F4F64DA1DB39BD7CD68748B847D2C24AD687E0CDB56> |!endend end
%ADOEndSubsetFont
SSJTFL+TimesNewRomanPSMT [0 -15.78 -15.78 0 0 0 ]msf47.7265 151.714 mo(\000/\000L\000Q\000H\000\003\000S\000L\000[\000H\000O\000V)[-9.64941 -4.39478 -7.89795 -7.01428 -3.95294 -7.89795 -4.39478 -7.89795 -7.01428 -4.39478 0 ]ysh49.587 637.294 mo(\000:\000K\000L\000W\000H\000\003\000S\000L\000[\000H\000O\000V)[-14.9058 -7.89935 -4.39624 -4.39624 -7.01569 -3.95441 -7.89941 -4.39618 -7.89941 -7.01569 -4.39624 0 ]yshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/SSJTFL+TimesNewRomanPSMT-Identity-H uf/SSJTFL+TimesNewRomanPSMT /CIDFont urAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
